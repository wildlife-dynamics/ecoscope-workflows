[project]
name = "ecoscope-workflows.core"
dynamic = ["version"]
requires-python = ">=3.10"
description = "An extensible task specification and compiler for local and distributed workflows."
readme = "README.md"
authors = [
  { name = "Charles Stern", email = "charless@earthranger.com" }
]
classifiers = [
    "Development Status :: 1 - Planning",
    "Operating System :: OS Independent",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Topic :: Scientific/Engineering",
]
license = { text = "BSD-3-Clause"}
scripts = { ecoscope-workflows = "ecoscope_workflows.core.__main__:main" }

[project.entry-points."ecoscope_workflows"]
tasks = "ecoscope_workflows.core.tasks"  # for user extensions, this could be "my_custom_tasks.tasks"

[project.urls]
Homepage = "https://github.com/wildlife-dynamics/ecoscope-workflows"
Tracker = "https://github.com/wildlife-dynamics/ecoscope-workflows/issues"

[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.build.hooks.vcs]
version-file = "ecoscope_workflows/core/_version.py"

[tool.hatch.version]
source = "vcs"
fallback-version = "9999"

[tool.hatch.version.raw-options]
root = "../../.."

[tool.pixi.project]
channels = [
    "https://prefix.dev/ecoscope-workflows",  # our custom channel, recipes in ./vendor directory
    "conda-forge",
]
platforms = ["linux-64", "linux-aarch64", "osx-arm64"]

[tool.pixi.pypi-dependencies]
"ecoscope-workflows.core" = { path = ".", editable = true }

[tool.pixi.dependencies]
jinja2 = "*"
pandera = "*"
pydantic = "<2.9.0"
pydantic-settings = "*"
"ruamel.yaml" = "*"
ruff = "*"
tomli-w = "*"

[tool.pixi.feature.gcs.dependencies]
cloudpathlib-gs = "*"

[tool.pixi.feature.lithops.dependencies]
lithops = { version = ">=3.4.1", channel = "https://prefix.dev/ecoscope-workflows" }
