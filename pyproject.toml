[build-system]
requires = ["setuptools>=45", "setuptools_scm[toml]>=6.2"]

[project]
name = "ecoscope-workflows"
dynamic = ["version"]
requires-python = ">=3.10"
description = "An extensible task specification and compiler for local and distributed workflows."
readme = "README.md"
authors = [
  { name = "Charles Stern", email = "charless@earthranger.com" }
]
classifiers = [
    "Development Status :: 1 - Planning",
    "Operating System :: OS Independent",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Topic :: Scientific/Engineering",
]
license = { file = "LICENSE" }

[project.scripts]
ecoscope-workflows = "ecoscope_workflows.__main__:main"

[project.entry-points."ecoscope_workflows"]
tasks = "ecoscope_workflows.tasks"  # for extensions, this could be "my_custom_tasks.tasks"

[project.urls]
Homepage = "https://github.com/wildlife-dynamics/ecoscope-workflows"
Tracker = "https://github.com/wildlife-dynamics/ecoscope-workflows/issues"

[tool.setuptools_scm]
write_to = "ecoscope_workflows/_version.py"
write_to_template = "__version__ = '{version}'"

[tool.setuptools.packages.find]
exclude = ["vendor"]
namespaces = false

[tool.setuptools.package-data]
ecoscope_workflows = ["tasks/**/*.parquet", "templates/*.jinja", "templates/*.jinja2"]

[tool.pixi.project]
channels = [
    "https://prefix.dev/ecoscope-workflows",  # our custom channel, recipes in ./vendor directory
    "conda-forge",
]
platforms = ["linux-64", "linux-aarch64", "osx-arm64"]

[tool.pixi.pypi-dependencies]
"ecoscope-workflows" = { path = ".", editable = true }

[tool.pixi.dependencies]
jinja2 = "*"
pandera = "*"
pydantic = "<2.9.0"
pydantic-settings = "*"
"ruamel.yaml" = "*"
ruff = "*"
tomli-w = "*"

[tool.pixi.feature.gcs.dependencies]
cloudpathlib-gs = "*"

[tool.pixi.feature.lithops.dependencies]
lithops = { version = ">=3.4.1", channel = "https://prefix.dev/ecoscope-workflows" }

[tool.pixi.feature.test.dependencies]
pytest = "*"

[tool.pixi.feature.xdist.dependencies]
pytest-xdist = "*"

[tool.pixi.feature.ecoscope-core.dependencies]
ecoscope = { version = "v1.8.3", channel = "https://prefix.dev/ecoscope-workflows" }

[tool.pixi.environments]
default = { solve-group = "default" }
gcs = { features = ["gcs"], solve-group = "default" }
lithops = { features = ["lithops"], solve-group = "default" }
lithops-gcs = { features = ["lithops", "gcs"], solve-group = "default" }
test-all = { features = ["lithops", "gcs", "test", "ecoscope-core"], solve-group = "default" }
