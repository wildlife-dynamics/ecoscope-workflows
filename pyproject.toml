[build-system]
requires = ["setuptools>=45", "setuptools_scm[toml]>=6.2"]

[project]
name = "ecoscope_workflows"
dynamic = ["version"]
requires-python = ">=3.10"
description = "An extensible task specification and compiler for local and distributed workflows."
readme = "README.md"
authors = [
  { name = "Charles Stern", email = "charless@earthranger.com" }
]
classifiers = [
    "Development Status :: 1 - Planning",
    "Operating System :: OS Independent",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Topic :: Scientific/Engineering",
]
license = {file = "LICENSE"}
dependencies = [
    # core
    "pandera",
    "pydantic",
    "pydantic-settings",
    "tomli-w",
    # compile-time only; todo: these could actually be optional dependencies
    # as they are not required for running workflows (just for compiling them)
    "jinja2",
    "ruamel.yaml",
    "ruff",
]

[project.optional-dependencies]
ecoscope-core = [
    "ecoscope @ git+https://github.com/wildlife-dynamics/ecoscope.git@v1.8.2"
]
gcs = [
    "cloudpathlib[gs]",
]
lithops = [
    "lithops",
]
notebook = [
    "jupytext",  # note: not actually used anywhere, but could use this to get an ipynb notebook directly
]
test = [
    "pytest",
]
visualize = [
    "pydot"  # requires system install of `graphviz` for the `dot` executable
]


[project.scripts]
ecoscope-workflows = "ecoscope_workflows.__main__:main"

[project.entry-points."ecoscope_workflows"]
tasks = "ecoscope_workflows.tasks"  # for extensions, this could be "my_custom_tasks.tasks"
# TODO: serde = "ecoscope_workflows.serde"  # for extensions, this could be "my_custom_serde.serde"

[project.urls]
Homepage = "https://github.com/wildlife-dynamics/ecoscope-workflows"
Tracker = "https://github.com/wildlife-dynamics/ecoscope-workflows/issues"

[tool.setuptools_scm]
write_to = "ecoscope_workflows/_version.py"
write_to_template = "__version__ = '{version}'"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
exclude = ["deploy"]
namespaces = false

[tool.setuptools.package-data]
ecoscope_workflows = ["py.typed", "tasks/**/*.parquet", "templates/*.jinja", "templates/*.jinja2"]

[tool.isort]
# Prevent isort & black from fighting each other
profile = "black"

[tool.pytest.ini_options]
markers = [
    "requires_ecoscope_core: requires `ecoscope` to be installed (deselect with '-m \"not requires_ecoscope_core\"')",
]
