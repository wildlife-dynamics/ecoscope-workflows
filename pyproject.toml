[build-system]
requires = ["setuptools>=45", "setuptools_scm[toml]>=6.2"]

[project]
name = "ecoscope-workflows"
dynamic = ["version"]
requires-python = ">=3.10"
description = "An extensible task specification and compiler for local and distributed workflows."
readme = "README.md"
authors = [
  { name = "Charles Stern", email = "charless@earthranger.com" }
]
classifiers = [
    "Development Status :: 1 - Planning",
    "Operating System :: OS Independent",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Topic :: Scientific/Engineering",
]
license = {file = "LICENSE"}
dependencies = [
    # core
    "pandera",
    "pydantic<2.9.0",  # fixme: 2.9.0 released sept 5, breaks `test_examples.py::test_dag_params_jsonschema`
    "pydantic-settings",
    "tomli-w",
    # compile-time only; todo: these could actually be optional dependencies
    # as they are not required for running workflows (just for compiling them)
    "jinja2",
    "ruamel.yaml",
    "ruff",
]

[project.optional-dependencies]
test = ["pytest"]
visualize = ["pydot"]  # requires system install of `graphviz` for the `dot` executable


[project.scripts]
ecoscope-workflows = "ecoscope_workflows.__main__:main"

[project.entry-points."ecoscope_workflows"]
tasks = "ecoscope_workflows.tasks"  # for extensions, this could be "my_custom_tasks.tasks"
# TODO: serde = "ecoscope_workflows.serde"  # for extensions, this could be "my_custom_serde.serde"

[project.urls]
Homepage = "https://github.com/wildlife-dynamics/ecoscope-workflows"
Tracker = "https://github.com/wildlife-dynamics/ecoscope-workflows/issues"

[tool.setuptools_scm]
write_to = "ecoscope_workflows/_version.py"
write_to_template = "__version__ = '{version}'"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
exclude = ["deploy"]
namespaces = false

[tool.setuptools.package-data]
ecoscope_workflows = ["py.typed", "tasks/**/*.parquet", "templates/*.jinja", "templates/*.jinja2"]

[tool.isort]
# Prevent isort & black from fighting each other
profile = "black"

[tool.pytest.ini_options]
markers = [
    "io: interfaces with 3rd party data services, which may likely require credentials (deselect with '-m \"not io\"')",
    "requires_ecoscope_core: requires `ecoscope` to be installed (deselect with '-m \"not requires_ecoscope_core\"')",
]

[tool.pixi.project]
channels = [
    "file:///usr/local/etc/wildlife-dynamics/channel",
    # TODO: "https://repo.prefix.dev/wildlife-dynamics",
    "conda-forge",
]
platforms = ["linux-64", "linux-aarch64", "osx-arm64"]

[tool.pixi.pypi-dependencies]
ecoscope_workflows = { path = ".", editable = true }

[tool.pixi.dependencies]  # TODO: validate equality with `pyproject.toml` dependencies
pandera = "*"
pydantic = "<2.9.0"
pydantic-settings = "*"
tomli-w = "*"
jinja2 = "*"
"ruamel.yaml" = "*"
ruff = "*"

[tool.pixi.feature.ecoscope-core.dependencies]
ecoscope = { version = ">=v1.8.2", channel = "file:///usr/local/etc/wildlife-dynamics/channel" }

[tool.pixi.feature.gcs.dependencies]
cloudpathlib-gs = "*"

[tool.pixi.feature.lithops.dependencies]
lithops = { version = ">=3.4.1", channel = "file:///usr/local/etc/wildlife-dynamics/channel" }

[tool.pixi.feature.test.dependencies]
pytest = "*"

[tool.pixi.environments]
default = { solve-group = "default" }
ecoscope-core = { features = ["ecoscope-core"], solve-group = "default" }
gcs = { features = ["gcs"], solve-group = "default" }
lithops = { features = ["lithops"], solve-group = "default" }
test = { features = ["test"], solve-group = "default" }

workflows-runtime-gcp = { features = ["ecoscope-core", "gcs", "lithops"], solve-group = "default" }
workflows-runtime-gcp-test = { features = ["ecoscope-core", "gcs", "lithops", "test"], solve-group = "default" }
