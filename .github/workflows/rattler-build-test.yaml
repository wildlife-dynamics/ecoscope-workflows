name: Test Rattler Build

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["*"]

jobs:
  build-base:
    runs-on: ubuntu-latest
    steps:
      # ~~~~~ rattler build local conda channel ~~~~~
      - uses: actions/checkout@v4
      - name: Setup micromamba env for rattler build
        uses: mamba-org/setup-micromamba@v1
        with:
          environment-name: rattler
          init-shell: bash
      # todo: this takes almost a minute: skip if cache hit
      - name: Install rattler-build & build artifacts (i.e. local conda channel)
        shell: bash -leo pipefail {0}
        run: |
          micromamba install -c conda-forge rattler-build --yes
          chmod +x .rattler-build/build.sh
          ./.rattler-build/build.sh

      # ~~~~~~~~~~ build testable base container ~~~~~~~~~~
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set only deps image name and tag on env
        run: |  # todo: change tag to :${{ dependency-files-hash }}
          echo "IMAGE_NAME=wildlife-dynamics/ecoscope-workflows-only-deps" >> $GITHUB_ENV
          echo "IMAGE_TAG=latest" >> $GITHUB_ENV
          echo "FULL_IMAGE_NAME=ghcr.io/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}" >> $GITHUB_ENV
      # TODO: if cache hit, just pull the image
      - name: Build Inventory Image
        run: |
          docker buildx build \
          --tag ${{ env.FULL_IMAGE_NAME }} \
          --platform=linux/amd64 \
          --file docker/Dockerfile.only-deps \
          --cache-from=type=gha \
          --cache-to=type=gha \
          .
          docker push ${{ env.FULL_IMAGE_NAME }}
      - name: Build and export testable container
        run: |
          docker buildx build \
          -t ecoscope-workflows-base:latest \
          --platform=linux/amd64 \
          -f docker/Dockerfile.base \
          -o type=tar,dest=/tmp/ecoscope-workflows-base.tar \
          .
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ecoscope-workflows-base
          path: /tmp/ecoscope-workflows-base.tar

  local-e2e-test:
    runs-on: ubuntu-latest
    needs: build-base
    steps:
      # ~~~~~~~~~~ download & load artifact ~~~~~~~~~~
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ecoscope-workflows-base
          path: /tmp
      - name: Load image
        run: docker load --input /tmp/ecoscope-workflows-base.tar && docker image ls -a

      # ~~~~~~~~~~ run local e2e tests ~~~~~~~~~~~~~~~
      - uses: actions/checkout@v4
      - name: Test worker container - sequential end-to-end
        shell: bash -leo pipefail {0}
        run: |
          docker run \
          -v `pwd`/tests:/opt/tests \
          -v `pwd`/examples:/opt/examples \
          ecoscope-workflows-base /env/bin/python -m pytest -v /opt/tests/test_examples.py \
          -k "end_to_end and sequential"

      - name: Test worker container - async end-to-end
        shell: bash -leo pipefail {0}
        run: |
          docker run \
          -v `pwd`/tests:/opt/tests \
          -v `pwd`/examples:/opt/examples \
          ecoscope-workflows-base /env/bin/python -m pytest -v /opt/tests/test_examples.py \
          -k "end_to_end and async"

  remote-e2e-test:
    runs-on: ubuntu-latest
    needs: build-base
    steps:
      # ~~~~~~~~~~ download & load artifact ~~~~~~~~~~
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ecoscope-workflows-base
          path: /tmp
      - name: Load image
        run: docker load --input /tmp/ecoscope-workflows-base.tar && docker image ls -a

      # ~~~ build & deploy lithops worker container ~~~
      - uses: actions/checkout@v4
      - name: Setup build environment
        uses: mamba-org/setup-micromamba@v1
        with:
          environment-name: rattler
          init-shell: bash
      - name: Build & install lithops
        shell: bash -leo pipefail {0}
        run: |
          micromamba install -c conda-forge rattler-build --yes
          rattler-build build --recipe .rattler-build/recipes/ps-mem.yaml --output-dir .rattler-build/artifacts --skip-existing=all
          rattler-build build --recipe .rattler-build/recipes/lithops.yaml  --output-dir .rattler-build/artifacts --skip-existing=all
          micromamba install -c file://$(pwd)/.rattler-build/artifacts lithops --yes

      - name: Google auth
        id: google-auth
        uses: google-github-actions/auth@v2
        with:
          # TODO: change to workload identity
          credentials_json: '${{ secrets.GCP_CLOUDRUN_LITHOPS_TESTING_SERVICE_ACCOUNT_KEY }}'

      - name: Set lithops runtime name on env
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            export COMMIT_SHA=${{ github.event.pull_request.head.sha }}
          else
            export COMMIT_SHA=${{ github.sha }}
          fi
          export SHORT_COMMIT_SHA=$(echo $COMMIT_SHA | cut -c1-7)
          echo "LITHOPS_RUNTIME_NAME=lithops-runtime-${{ github.event_name }}-$SHORT_COMMIT_SHA" >> $GITHUB_ENV

      - name: Create lithops config
        run: |
          cat <<EOF > .lithops-config.yaml
          lithops:
            backend: gcp_cloudrun
            storage: gcp_storage
            log_level: INFO
            data_limit: 500
          gcp:
            region: us-central1
          gcp_cloudrun:
            runtime: us.gcr.io/${{ steps.google-auth.outputs.project_id }}/${{ env.LITHOPS_RUNTIME_NAME }}
            runtime_cpu: 2
            runtime_memory: 1000
          EOF

      - name: Lithops build
        shell: bash -leo pipefail {0}
        run: |
          LITHOPS_CONFIG_FILE=.lithops-config.yaml \
          lithops runtime build -b gcp_cloudrun -f docker/Dockerfile.worker ${{ env.LITHOPS_RUNTIME_NAME }}

      - name: Lithops deploy
        shell: bash -leo pipefail {0}
        run: |
          LITHOPS_CONFIG_FILE=.lithops-config.yaml \
          lithops runtime deploy ${{ env.LITHOPS_RUNTIME_NAME }}

      - name: Test remote worker container - async end-to-end
        shell: bash -leo pipefail {0}
        run: |
          docker run \
          -v `pwd`/tests:/opt/tests \
          -v `pwd`/examples:/opt/examples \
          ecoscope-workflows-base /env/bin/python -m pytest -v /opt/tests/test_examples.py \
          -k "end_to_end and async"

      - name: Post Lithops deploy (teardown)
        if: always()  # always run teardown even if previous steps fail
        shell: bash -leo pipefail {0}
        run: |
          LITHOPS_CONFIG_FILE=.lithops-config.yaml \
          lithops runtime delete ${{ env.LITHOPS_RUNTIME_NAME }}
