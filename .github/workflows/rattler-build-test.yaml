name: Test Rattler Build

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["*"]

jobs:
  build-base:
    runs-on: ubuntu-latest
    steps:
      # ~~~~~ rattler build local conda channel ~~~~~
      - uses: actions/checkout@v4
      - name: Setup micromamba env for rattler build
        uses: mamba-org/setup-micromamba@v1
        with:
          environment-name: rattler
          init-shell: bash
      - name: Install rattler-build & build artifacts (i.e. local conda channel)
        shell: bash -leo pipefail {0}
        run: |
          micromamba install -c conda-forge rattler-build --yes
          chmod +x .rattler-build/build.sh
          ./.rattler-build/build.sh

      # ~~~~~~~~~~ build testable base container ~~~~~~~~~~
      # xref https://docs.docker.com/build/ci/github-actions/share-image-jobs/
      # build locally with: `docker buildx build -t $TAG --target=testable_runtime -f Dockerfile .`
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and export testable container
        uses: docker/build-push-action@v6
        with:
          context: .  # path context to get results of rattler-build mutations in build context
          file: docker/Dockerfile.base
          tags: ecoscope-workflows-base:latest
          outputs: type=docker,dest=/tmp/ecoscope-workflows-base.tar
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ecoscope-workflows-base
          path: /tmp/ecoscope-workflows-base.tar

  local-e2e-test:
    runs-on: ubuntu-latest
    needs: build-base
    steps:
      # ~~~~~~~~~~ download & load artifact ~~~~~~~~~~
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ecoscope-workflows-base
          path: /tmp
      - name: Load image
        run: docker load --input /tmp/ecoscope-workflows-base.tar && docker image ls -a

      # ~~~~~~~~~~ run local e2e tests ~~~~~~~~~~~~~~~
      - uses: actions/checkout@v4
      - name: Test worker container - sequential end-to-end
        shell: bash -leo pipefail {0}
        run: |
          docker run \
          -v `pwd`/tests:/opt/tests \
          -v `pwd`/examples:/opt/examples \
          ecoscope-workflows-base /env/bin/python -m pytest -v /opt/tests/test_examples.py \
          -k "end_to_end and sequential"

      - name: Test worker container - async end-to-end
        shell: bash -leo pipefail {0}
        run: |
          docker run \
          -v `pwd`/tests:/opt/tests \
          -v `pwd`/examples:/opt/examples \
          ecoscope-workflows-base /env/bin/python -m pytest -v /opt/tests/test_examples.py \
          -k "end_to_end and async"

  remote-e2e-test:
    runs-on: ubuntu-latest
    needs: build-base
    steps:
      # ~~~~~~~~~~ download & load artifact ~~~~~~~~~~
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ecoscope-workflows-base
          path: /tmp
      - name: Load image
        run: docker load --input /tmp/ecoscope-workflows-base.tar && docker image ls -a

      # ~~~ build & deploy lithops worker container ~~~
      - uses: actions/checkout@v4
      - name: Setup build environment
        uses: mamba-org/setup-micromamba@v1
        with:
          environment-name: rattler
          init-shell: bash
      - name: Build & install lithops
        shell: bash -leo pipefail {0}
        run: |
          micromamba install -c conda-forge rattler-build --yes
          rattler-build build --recipe .rattler-build/recipes/ps-mem.yaml --output-dir .rattler-build/artifacts --skip-existing=all
          rattler-build build --recipe .rattler-build/recipes/lithops.yaml  --output-dir .rattler-build/artifacts --skip-existing=all
          micromamba install -c file://$(pwd)/.rattler-build/artifacts lithops --yes

      - name: Google auth
        id: google-auth
        uses: google-github-actions/auth@v2
        with:
          # TODO: change to workload identity
          credentials_json: '${{ secrets.GCP_CLOUDRUN_LITHOPS_TESTING_SERVICE_ACCOUNT_KEY }}'

      - name: Set lithops runtime name on env
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            export COMMIT_SHA=${{ github.event.pull_request.head.sha }}
          else
            export COMMIT_SHA=${{ github.sha }}
          fi
          export SHORT_COMMIT_SHA=$(echo $COMMIT_SHA | cut -c1-7)
          echo "LITHOPS_RUNTIME_NAME=lithops-runtime-${{ github.event_name }}-$SHORT_COMMIT_SHA" >> $GITHUB_ENV

      - name: Create lithops config
        run: |
          cat <<EOF > .lithops-config.yaml
          lithops:
            backend: gcp_cloudrun
            storage: gcp_storage
            log_level: INFO
            data_limit: 500
          gcp:
            region: us-central1
          gcp_cloudrun:
            runtime: us.gcr.io/${{ steps.google-auth.outputs.project_id }}/${{ env.LITHOPS_RUNTIME_NAME }}
            runtime_cpu: 2
            runtime_memory: 1000
          EOF

      - name: Lithops build
        shell: bash -leo pipefail {0}
        run: |
          LITHOPS_CONFIG_FILE=.lithops-config.yaml \
          lithops runtime build -b gcp_cloudrun -f docker/Dockerfile.worker ${{ env.LITHOPS_RUNTIME_NAME }}

      - name: Lithops deploy
        shell: bash -leo pipefail {0}
        run: |
          LITHOPS_CONFIG_FILE=.lithops-config.yaml \
          lithops runtime deploy ${{ env.LITHOPS_RUNTIME_NAME }}

      # - name: Test worker container - remote end-to-end
      #   shell: bash -leo pipefail {0}
      #   run: |
      #     docker run \
      #     -v `pwd`/tests:/opt/tests \
      #     -v `pwd`/examples:/opt/examples \
      #     ecoscope-workflows-base /env/bin/python -m pytest -v /opt/tests/test_examples.py \
      #     -k "end_to_end and remote"

      - name: Post Lithops deploy (teardown)
        if: always()  # always run teardown even if previous steps fail
        shell: bash -leo pipefail {0}
        run: |
          LITHOPS_CONFIG_FILE=.lithops-config.yaml \
          lithops runtime delete ${{ env.LITHOPS_RUNTIME_NAME }}
