# TODO: generate this _instead_ of "params_fillable.yaml"  and then edit it
test1:
  name: Test 1
  description: "Test case for subject-tracking"
  params:
    # Parameters for 'Set Groupers' using task `set_groupers`.
    groupers:
      groupers: # (list[ecoscope_workflows.tasks.groupby._groupby.Grouper], FieldInfo(annotation=NoneType, required=True, description='            Index(es) and/or column(s) to group by, along with\n            optional display names and help text.\n            '))
        - index_name: "month"
          display_name: "Month"
          help_text: "The month in which the patrol began or the event was updated."

    # Parameters for 'Get Subject Group Observations from EarthRanger' using task `get_subjectgroup_observations`.
    subject_obs:
      client: "mep_dev" # (<class 'ecoscope_workflows.connections.EarthRangerClientProtocol'>, BeforeValidator(func=<bound method DataConnection.client_from_named_connection of <class 'ecoscope_workflows.connections.EarthRangerConnection'>>), WithJsonSchema(json_schema={'type': 'string', 'description': 'A named EarthRanger connection.'}, mode=None))
      subject_group_name: "Elephants" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='Name of EarthRanger Subject'))
      since: "2011-01-01T00:00:00Z" # (<class 'datetime.datetime'>, FieldInfo(annotation=NoneType, required=True, description='Start date'))
      until: "2023-01-01T00:00:00Z" # (<class 'datetime.datetime'>, FieldInfo(annotation=NoneType, required=True, description='End date'))
      include_inactive: False # (<class 'bool'>, FieldInfo(annotation=NoneType, required=True, description='Whether or not to include inactive subjects'))

    # Parameters for 'Transform Observations to Relocations' using task `process_relocations`.
    subject_reloc:
      filter_point_coords:
        - x: 180.0
          y: 90.0
        - x: 0.0
          y: 0.0
      relocs_columns: ["groupby_col", "fixtime", "junk_status", "geometry"] # (list[str], FieldInfo(annotation=NoneType, required=True))

    # Parameters for 'Transform Relocations to Trajectories' using task `relocations_to_trajectory`.
    subject_traj:
      min_length_meters: 0.001 # (<class 'float'>, FieldInfo(annotation=NoneType, required=True))
      max_length_meters: 10000 # (<class 'float'>, FieldInfo(annotation=NoneType, required=True))
      max_time_secs: 3600 # (<class 'float'>, FieldInfo(annotation=NoneType, required=True))
      min_time_secs: 1 # (<class 'float'>, FieldInfo(annotation=NoneType, required=True))
      max_speed_kmhr: 120 # (<class 'float'>, FieldInfo(annotation=NoneType, required=True))
      min_speed_kmhr: 0.0 # (<class 'float'>, FieldInfo(annotation=NoneType, required=True))

    # Parameters for 'Add temporal index to Subject Trajectories' using task `add_temporal_index`.
    traj_add_temporal_index:
      index_name: "month" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='A name for the new index which will be added.'))
      time_col: "segment_start" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='Name of existing column containing time data.'))
      directive: "%B" # (typing.Literal['%a', '%A', '%b', '%B', '%c', '%d', '%f', '%H', '%I', '%j', '%m', '%M', '%p', '%S', '%U', '%w', '%W', '%x', '%X', '%y', '%Y', '%z', '%%'], FieldInfo(annotation=NoneType, required=True, description='A directive for formatting the time data.'))

    # Parameters for 'Split Subject Trajectories by Group' using task `split_groups`.
    split_subject_traj_groups: {}

    classify_traj_speed:
      input_column_name: "speed_kmhr"
      output_column_name: "speed_bins"
      classification_options:
        scheme: "equal_interval"
        k: 6

    colormap_traj_speed:
      input_column_name: "speed_bins"
      colormap:
        ["#1a9850", "#91cf60", "#d9ef8b", "#fee08b", "#fc8d59", "#d73027"]
      output_column_name: "speed_bins_colormap"

    # Parameters for 'Create map layer for each trajectory group' using task `create_map_layer`.
    traj_map_layers:
      layer_style:
        layer_type: "polyline"
        color_column: "speed_bins_colormap"
      legend:
        label_column: "speed_bins"
        color_column: "speed_bins_colormap"

    # Parameters for 'Draw Ecomaps for each trajectory group' using task `draw_ecomap`.
    traj_ecomap:
      tile_layer: "OpenStreetMap" # (str, FieldInfo(annotation=NoneType, required=False))
      static: False # (<class 'bool'>, FieldInfo(annotation=NoneType, required=False))
      title: "Subject Group Trajectory Map" # (<class 'str'>, FieldInfo(annotation=NoneType, required=False))

    # Parameters for 'Persist ecomap as Text' using task `persist_text`.
    ecomap_html_urls: {}

    # Parameters for 'Create Map Widgets for Patrol Events' using task `create_map_widget_single_view`.
    traj_map_widgets_single_views:
      title: "Subject Group Trajectory Map" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='The title of the widget'))

    # Parameters for 'Merge EcoMap Widget Views' using task `merge_widget_views`.
    traj_grouped_map_widget: {}

    # Parameters for 'Calculate Mean Speed Per Group' using task `dataframe_column_mean`.
    mean_speed:
      column_name: "speed_kmhr" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='Column to aggregate'))

    average_speed_converted:
      original_unit: "km/h"
      new_unit: "km/h"

    # Parameters for 'Create Single Value Widgets for Mean Speed Per Group' using task `create_single_value_widget_single_view`.
    mean_speed_sv_widgets:
      title: "Mean Speed" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='The title of the widget'))

    # Parameters for 'Merge per group Mean Speed SV widgets' using task `merge_widget_views`.
    mean_speed_grouped_sv_widget: {}

    # Parameters for 'Calculate Max Speed Per Group' using task `dataframe_column_mean`.
    max_speed:
      column_name: "speed_kmhr" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='Column to aggregate'))

    max_speed_converted:
      original_unit: "km/h"
      new_unit: "km/h"

    # Parameters for 'Create Single Value Widgets for Mean Max Per Group' using task `create_single_value_widget_single_view`.
    max_speed_sv_widgets:
      title: "Max Speed" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='The title of the widget'))

    # Parameters for 'Merge per group Total Patrols SV widgets' using task `merge_widget_views`.
    max_speed_grouped_sv_widget: {}

    # Parameters for 'Calculate Number of Locations Per Group' using task `dataframe_count`.
    num_location: {}

    # Parameters for 'Create Single Value Widgets for Number of Location Per Group' using task `create_single_value_widget_single_view`.
    num_location_sv_widgets:
      title: "Number of Locations" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='The title of the widget'))

    # Parameters for 'Merge per group Number of Locations SV widgets' using task `merge_widget_views`.
    num_location_grouped_sv_widget: {}

    # Parameters for 'Calculate Day/Night Ratio Per Group' using task `get_day_night_ratio`.
    daynight_ratio: {}

    # Parameters for 'Create Single Value Widgets for Day/Night Ratio Per Group' using task `create_single_value_widget_single_view`.
    daynight_ratio_sv_widgets:
      title: "Day Night Ratio" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='The title of the widget'))

    # Parameters for 'Merge per group Day/Night Ratio SV widgets' using task `merge_widget_views`.
    daynight_ratio_grouped_sv_widget: {}

    # Parameters for 'Calculate Time Density from Trajectory' using task `calculate_time_density`.
    td:
      pixel_size: 250.0 # (<class 'float'>, FieldInfo(annotation=NoneType, required=False, default=250.0, description='Pixel size for raster profile.'))
      crs: "ESRI:102022" # (<class 'str'>, FieldInfo(annotation=NoneType, required=False, default='ESRI:102022'))
      nodata_value: -9999 # (<class 'float'>, FieldInfo(annotation=NoneType, required=False, default=nan, metadata=[_PydanticGeneralMetadata(allow_inf_nan=True)]))
      band_count: 1 # (<class 'int'>, FieldInfo(annotation=NoneType, required=False, default=1))
      max_speed_factor: 1.05 # (<class 'float'>, FieldInfo(annotation=NoneType, required=False, default=1.05))
      expansion_factor: 1.3 # (<class 'float'>, FieldInfo(annotation=NoneType, required=False, default=1.3))
      percentiles: [50.0, 60.0, 70.0, 80.0, 90.0, 95.0] # (list[float], FieldInfo(annotation=NoneType, required=False, default=[50.0, 60.0, 70.0, 80.0, 90.0, 95.0]))

    # Parameters for 'Create map layer from Time Density' using task `create_map_layer`.
    td_map_layer:
      layer_style:
        layer_type: "polygon"

    # Parameters for 'Draw Ecomap from Time Density' using task `draw_ecomap`.
    td_ecomap:
      tile_layer: OpenStreetMap # (str, FieldInfo(annotation=NoneType, required=False))
      static: False # (<class 'bool'>, FieldInfo(annotation=NoneType, required=False))
      title: "Great Map" # (<class 'str'>, FieldInfo(annotation=NoneType, required=False))

    # Parameters for 'Persist Ecomap as Text' using task `persist_text`.
    td_ecomap_html_url: {}

    # Parameters for 'Create Time Density Map Widget' using task `create_map_widget_single_view`.
    td_map_widget:
      title: "Home Range Map" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='The title of the widget'))

    # Parameters for 'Merge Time Density Map Widget Views' using task `merge_widget_views`.
    td_grouped_map_widget: {}

    # Parameters for 'Create Dashboard with Subject Tracking Widgets' using task `gather_dashboard`.
    subject_tracking_dashboard:
      title: "Subject Tracking Dashboard" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='The title of the dashboard'))
      description: "A dashboard for visualizing subject trajectories and home range." # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='The description of the dashboard'))

  assertions:
    result_stdout_contains:
      - "A dashboard for visualizing subject trajectories and home range."
      - "widget_type='map', title='Subject Group Trajectory Map'"
      - "widget_type='stat', title='Mean Speed'"
      - "widget_type='stat', title='Max Speed',"
      - "widget_type='stat', title='Number of Locations'"
      - "widget_type='map', title='Home Range Map'"
