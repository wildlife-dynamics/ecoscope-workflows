# Parameters for 'Get SubjectGroup Observations from EarthRanger' using task `get_subjectgroup_observations`.
obs:
  client:   # (<class 'ecoscope_workflows.connections.EarthRangerClientProtocol'>, BeforeValidator(func=<bound method DataConnection.client_from_named_connection of <class 'ecoscope_workflows.connections.EarthRangerConnection'>>), WithJsonSchema(json_schema={'type': 'string', 'description': 'A named EarthRanger connection.'}, mode=None))
  subject_group_name:   # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='Name of EarthRanger Subject'))
  include_inactive:   # (<class 'bool'>, FieldInfo(annotation=NoneType, required=True, description='Whether or not to include inactive subjects'))
  since:   # (<class 'datetime.datetime'>, FieldInfo(annotation=NoneType, required=True, description='Start date'))
  until:   # (<class 'datetime.datetime'>, FieldInfo(annotation=NoneType, required=True, description='End date'))

# Parameters for 'Transform Observations to Relocations' using task `process_relocations`.
reloc:
  filter_point_coords:   # (list[list[float]], FieldInfo(annotation=NoneType, required=True))
  relocs_columns:   # (list[str], FieldInfo(annotation=NoneType, required=True))

# Parameters for 'Transform Relocations to Trajectories' using task `relocations_to_trajectory`.
traj:
  min_length_meters:   # (<class 'float'>, FieldInfo(annotation=NoneType, required=True))
  max_length_meters:   # (<class 'float'>, FieldInfo(annotation=NoneType, required=True))
  max_time_secs:   # (<class 'float'>, FieldInfo(annotation=NoneType, required=True))
  min_time_secs:   # (<class 'float'>, FieldInfo(annotation=NoneType, required=True))
  max_speed_kmhr:   # (<class 'float'>, FieldInfo(annotation=NoneType, required=True))
  min_speed_kmhr:   # (<class 'float'>, FieldInfo(annotation=NoneType, required=True))

# Parameters for 'Calculate Time Density from Trajectory' using task `calculate_time_density`.
td:
  pixel_size:   # (<class 'float'>, FieldInfo(annotation=NoneType, required=False, default=250.0, description='Pixel size for raster profile.'))
  crs:   # (<class 'str'>, FieldInfo(annotation=NoneType, required=False, default='ESRI:102022'))
  nodata_value:   # (<class 'float'>, FieldInfo(annotation=NoneType, required=False, default='nan', metadata=[_PydanticGeneralMetadata(allow_inf_nan=True)]))
  band_count:   # (<class 'int'>, FieldInfo(annotation=NoneType, required=False, default=1))
  max_speed_factor:   # (<class 'float'>, FieldInfo(annotation=NoneType, required=False, default=1.05))
  expansion_factor:   # (<class 'float'>, FieldInfo(annotation=NoneType, required=False, default=1.3))
  percentiles:   # (list[float], FieldInfo(annotation=NoneType, required=False, default=[50.0, 60.0, 70.0, 80.0, 90.0, 95.0]))

# Parameters for 'Draw Ecomap from Time Density' using task `draw_ecomap`.
td_ecomap:
  data_type:   # (typing.Literal['Scatterplot', 'Path', 'Polygon'], FieldInfo(annotation=NoneType, required=True, description='The type of visualization.'))
  style_kws:   # (<class 'dict'>, FieldInfo(annotation=NoneType, required=True, description='Style arguments for the data visualization.'))
  tile_layer:   # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='A named tile layer, ie OpenStreetMap.'))
  static:   # (<class 'bool'>, FieldInfo(annotation=NoneType, required=True, description='Set to true to disable map pan/zoom.'))
  title:   # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='The map title.'))
  title_kws:   # (<class 'dict'>, FieldInfo(annotation=NoneType, required=True, description='Additional arguments for configuring the Title.'))
  scale_kws:   # (<class 'dict'>, FieldInfo(annotation=NoneType, required=True, description='Additional arguments for configuring the Scale Bar.'))
  north_arrow_kws:   # (<class 'dict'>, FieldInfo(annotation=NoneType, required=True, description='Additional arguments for configuring the North Arrow.'))

# Parameters for 'Persist Ecomap as Text' using task `persist_text`.
td_ecomap_html_url:
  filename:   # (str | None, FieldInfo(annotation=NoneType, required=True, description='            Optional filename to persist text to within the `root_path`.\n            If not provided, a filename will be generated based on a hash of the text content.\n            '))

# Parameters for 'Create Time Density Map Widget' using task `create_map_widget_single_view`.
td_map_widget:
  title:   # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='The title of the widget'))
  view:   # (tuple[tuple[str, typing.Literal['='], str], ...] | None, FieldInfo(annotation=NoneType, required=True, description='If grouped, the view of the widget'))

# Parameters for 'Create Dashboard with Time Density Map Widget' using task `gather_dashboard`.
td_dashboard:
  title:   # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='The title of the dashboard'))
  description:   # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='The description of the dashboard'))
  groupers:   # (list | None, FieldInfo(annotation=NoneType, required=True, description='            A list of groupers that are used to group the widgets.\n            If all widgets are ungrouped, this field defaults to `None`.\n            '))
