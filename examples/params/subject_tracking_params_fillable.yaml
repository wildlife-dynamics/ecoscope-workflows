# Parameters for 'Set Groupers' using task `set_groupers`.
groupers:
  groupers:   # (list[ecoscope_workflows.tasks.groupby._groupby.Grouper], FieldInfo(annotation=NoneType, required=True, description='            Index(es) and/or column(s) to group by, along with\n            optional display names and help text.\n            '))

# Parameters for 'Get Subject Group Observations from EarthRanger' using task `get_subjectgroup_observations`.
subject_obs:
  client:   # (<class 'ecoscope_workflows.connections.EarthRangerClientProtocol'>, BeforeValidator(func=<bound method DataConnection.client_from_named_connection of <class 'ecoscope_workflows.connections.EarthRangerConnection'>>), WithJsonSchema(json_schema={'type': 'string', 'description': 'A named EarthRanger connection.'}, mode=None))
  subject_group_name:   # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='Name of EarthRanger Subject'))
  since:   # (<class 'datetime.datetime'>, FieldInfo(annotation=NoneType, required=True, description='Start date'))
  until:   # (<class 'datetime.datetime'>, FieldInfo(annotation=NoneType, required=True, description='End date'))
  include_inactive:   # (<class 'bool'>, FieldInfo(annotation=NoneType, required=True, description='Whether or not to include inactive subjects'))

# Parameters for 'Transform Observations to Relocations' using task `process_relocations`.
subject_reloc:
  filter_point_coords:   # (list[ecoscope_workflows.tasks.transformation._filtering.Coordinate], FieldInfo(annotation=NoneType, required=True))
  relocs_columns:   # (list[str], FieldInfo(annotation=NoneType, required=True))

# Parameters for 'Transform Relocations to Trajectories' using task `relocations_to_trajectory`.
subject_traj:
  min_length_meters:   # (<class 'float'>, FieldInfo(annotation=NoneType, required=True))
  max_length_meters:   # (<class 'float'>, FieldInfo(annotation=NoneType, required=True))
  max_time_secs:   # (<class 'float'>, FieldInfo(annotation=NoneType, required=True))
  min_time_secs:   # (<class 'float'>, FieldInfo(annotation=NoneType, required=True))
  max_speed_kmhr:   # (<class 'float'>, FieldInfo(annotation=NoneType, required=True))
  min_speed_kmhr:   # (<class 'float'>, FieldInfo(annotation=NoneType, required=True))

# Parameters for 'Add temporal index to Subject Trajectories' using task `add_temporal_index`.
traj_add_temporal_index:
  index_name:   # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='A name for the new index which will be added.'))
  time_col:   # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='Name of existing column containing time data.'))
  directive:   # (typing.Literal['%a', '%A', '%b', '%B', '%c', '%d', '%f', '%H', '%I', '%j', '%m', '%M', '%p', '%S', '%U', '%w', '%W', '%x', '%X', '%y', '%Y', '%z', '%%'], FieldInfo(annotation=NoneType, required=True, description='A directive for formatting the time data.'))
  cast_to_datetime:   # (<class 'bool'>, FieldInfo(annotation=NoneType, required=True, description='Whether to attempt casting `time_col` to datetime.'))
  format:   # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='            If `cast_to_datetime=True`, the format to pass to `pd.to_datetime`\n            when attempting to cast `time_col` to datetime. Defaults to "mixed".\n            '))

# Parameters for 'Split Subject Trajectories by Group' using task `split_groups`.
split_subject_traj_groups:

# Parameters for 'Create map layer for each trajectory group' using task `create_map_layer`.
traj_map_layers:
  layer_style:   # (ecoscope_workflows.tasks.results._ecomap.PolylineLayerStyle | ecoscope_workflows.tasks.results._ecomap.PolygonLayerStyle | ecoscope_workflows.tasks.results._ecomap.PointLayerStyle, FieldInfo(annotation=NoneType, required=True, description='Style arguments for the layer.'))

# Parameters for 'Draw Ecomaps for each trajectory group' using task `draw_ecomap`.
traj_ecomap:
  tile_layer:   # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='A named tile layer, ie OpenStreetMap.'))
  static:   # (<class 'bool'>, FieldInfo(annotation=NoneType, required=True, description='Set to true to disable map pan/zoom.'))
  title:   # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='The map title.'))
  north_arrow_style:   # (typing.Union[ecoscope_workflows.tasks.results._ecomap.NorthArrowStyle, typing.Annotated[NoneType, SkipJsonSchema()]], FieldInfo(annotation=NoneType, required=True, description='Additional arguments for configuring the North Arrow.'))

# Parameters for 'Persist ecomap as Text' using task `persist_text`.
ecomap_html_urls:
  filename:   # (typing.Union[str, typing.Annotated[NoneType, SkipJsonSchema()]], FieldInfo(annotation=NoneType, required=True, description='            Optional filename to persist text to within the `root_path`.\n            If not provided, a filename will be generated based on a hash of the text content.\n            '))

# Parameters for 'Create Map Widgets for Trajectories' using task `create_map_widget_single_view`.
traj_map_widgets_single_views:
  title:   # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='The title of the widget'))

# Parameters for 'Merge EcoMap Widget Views' using task `merge_widget_views`.
traj_grouped_map_widget:

# Parameters for 'Calculate Mean Speed Per Group' using task `dataframe_column_mean`.
mean_speed:
  column_name:   # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='Column to aggregate'))

# Parameters for 'Create Single Value Widgets for Mean Speed Per Group' using task `create_single_value_widget_single_view`.
mean_speed_sv_widgets:
  title:   # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='The title of the widget'))

# Parameters for 'Merge per group Mean Speed SV widgets' using task `merge_widget_views`.
mean_speed_grouped_sv_widget:

# Parameters for 'Calculate Max Speed Per Group' using task `dataframe_column_max`.
max_speed:
  column_name:   # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='Column to aggregate'))

# Parameters for 'Create Single Value Widgets for Max Speed Per Group' using task `create_single_value_widget_single_view`.
max_speed_sv_widgets:
  title:   # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='The title of the widget'))

# Parameters for 'Merge per group Max Speed SV widgets' using task `merge_widget_views`.
max_speed_grouped_sv_widget:

# Parameters for 'Calculate Number of Locations Per Group' using task `dataframe_count`.
num_location:

# Parameters for 'Create Single Value Widgets for Number of Location Per Group' using task `create_single_value_widget_single_view`.
num_location_sv_widgets:
  title:   # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='The title of the widget'))

# Parameters for 'Merge per group Number of Locations SV widgets' using task `merge_widget_views`.
num_location_grouped_sv_widget:

# Parameters for 'Calculate Time Density from Trajectory' using task `calculate_time_density`.
td:
  pixel_size:   # (<class 'float'>, FieldInfo(annotation=NoneType, required=False, default=250.0, description='Pixel size for raster profile.'))
  crs:   # (<class 'str'>, FieldInfo(annotation=NoneType, required=False, default='ESRI:102022'))
  nodata_value:   # (<class 'float'>, FieldInfo(annotation=NoneType, required=False, default='nan', metadata=[_PydanticGeneralMetadata(allow_inf_nan=True)]))
  band_count:   # (<class 'int'>, FieldInfo(annotation=NoneType, required=False, default=1))
  max_speed_factor:   # (<class 'float'>, FieldInfo(annotation=NoneType, required=False, default=1.05))
  expansion_factor:   # (<class 'float'>, FieldInfo(annotation=NoneType, required=False, default=1.3))
  percentiles:   # (list[float], FieldInfo(annotation=NoneType, required=False, default=[50.0, 60.0, 70.0, 80.0, 90.0, 95.0]))

# Parameters for 'Create map layer from Time Density' using task `create_map_layer`.
td_map_layer:
  layer_style:   # (ecoscope_workflows.tasks.results._ecomap.PolylineLayerStyle | ecoscope_workflows.tasks.results._ecomap.PolygonLayerStyle | ecoscope_workflows.tasks.results._ecomap.PointLayerStyle, FieldInfo(annotation=NoneType, required=True, description='Style arguments for the layer.'))

# Parameters for 'Draw Ecomap from Time Density' using task `draw_ecomap`.
td_ecomap:
  tile_layer:   # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='A named tile layer, ie OpenStreetMap.'))
  static:   # (<class 'bool'>, FieldInfo(annotation=NoneType, required=True, description='Set to true to disable map pan/zoom.'))
  title:   # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='The map title.'))
  north_arrow_style:   # (typing.Union[ecoscope_workflows.tasks.results._ecomap.NorthArrowStyle, typing.Annotated[NoneType, SkipJsonSchema()]], FieldInfo(annotation=NoneType, required=True, description='Additional arguments for configuring the North Arrow.'))

# Parameters for 'Persist Ecomap as Text' using task `persist_text`.
td_ecomap_html_url:
  filename:   # (typing.Union[str, typing.Annotated[NoneType, SkipJsonSchema()]], FieldInfo(annotation=NoneType, required=True, description='            Optional filename to persist text to within the `root_path`.\n            If not provided, a filename will be generated based on a hash of the text content.\n            '))

# Parameters for 'Create Time Density Map Widget' using task `create_map_widget_single_view`.
td_map_widget:
  title:   # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='The title of the widget'))

# Parameters for 'Merge Time Density Map Widget Views' using task `merge_widget_views`.
td_grouped_map_widget:

# Parameters for 'Create Dashboard with Subject Tracking Widgets' using task `gather_dashboard`.
subject_tracking_dashboard:
  title:   # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='The title of the dashboard'))
  description:   # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='The description of the dashboard'))
