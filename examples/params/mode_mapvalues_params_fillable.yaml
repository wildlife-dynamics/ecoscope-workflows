# Parameters for 'Get Patrol Events from EarthRanger' using task `get_patrol_events`.
patrol_events:
  client:   # (<class 'ecoscope_workflows.connections.EarthRangerClientProtocol'>, BeforeValidator(func=<bound method DataConnection.client_from_named_connection of <class 'ecoscope_workflows.connections.EarthRangerConnection'>>), WithJsonSchema(json_schema={'type': 'string', 'description': 'A named EarthRanger connection.'}, mode=None))
  since:   # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='Start date'))
  until:   # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='End date'))
  patrol_type:   # (list[str], FieldInfo(annotation=NoneType, required=True, description='list of UUID of patrol types'))
  status:   # (list[str], FieldInfo(annotation=NoneType, required=True, description="list of 'scheduled'/'active'/'overdue'/'done'/'cancelled'"))

# Parameters for 'Set Groupers' using task `set_groupers`.
groupers:
  groupers:   # (list[ecoscope_workflows.tasks.groupby._groupby.Grouper], FieldInfo(annotation=NoneType, required=True, description='            Index(es) and/or column(s) to group by, along with\n            optional display names and help text.\n            '))

# Parameters for 'Split Observations' using task `split_groups`.
split_obs:

# Parameters for 'Create Map Layer For Each Group' using task `create_map_layer`.
map_layers:
  layer_style:   # (ecoscope_workflows.tasks.results._ecomap.PolylineLayerStyle | ecoscope_workflows.tasks.results._ecomap.PolygonLayerStyle | ecoscope_workflows.tasks.results._ecomap.PointLayerStyle, FieldInfo(annotation=NoneType, required=True, description='Style arguments for the layer.'))

# Parameters for 'Create EcoMap For Each Group' using task `draw_ecomap`.
ecomaps:
  tile_layer:   # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='A named tile layer, ie OpenStreetMap.'))
  static:   # (<class 'bool'>, FieldInfo(annotation=NoneType, required=True, description='Set to true to disable map pan/zoom.'))
  title:   # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='The map title.'))
  north_arrow_style:   # (typing.Union[ecoscope_workflows.tasks.results._ecomap.NorthArrowStyle, typing.Annotated[NoneType, SkipJsonSchema()]], FieldInfo(annotation=NoneType, required=True, description='Additional arguments for configuring the North Arrow.'))

# Parameters for 'Persist EcoMaps' using task `persist_text`.
ecomaps_persist:
  filename:   # (typing.Union[str, typing.Annotated[NoneType, SkipJsonSchema()]], FieldInfo(annotation=NoneType, required=True, description='            Optional filename to persist text to within the `root_path`.\n            If not provided, a filename will be generated based on a hash of the text content.\n            '))

# Parameters for 'Create EcoMap Widgets' using task `create_map_widget_single_view`.
ecomap_widgets:
  title:   # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='The title of the widget'))

# Parameters for 'Merge EcoMap Widget Views' using task `merge_widget_views`.
ecomap_widgets_merged:

# Parameters for 'Create EcoMap Dashboard' using task `gather_dashboard`.
dashboard:
  title:   # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='The title of the dashboard'))
  description:   # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='The description of the dashboard'))
