# Parameters for 'Set Groupers' using task `set_groupers`.
groupers:
  groupers: # (list[ecoscope_workflows.tasks.groupby._groupby.Grouper], FieldInfo(annotation=NoneType, required=True, description='            Index(es) and/or column(s) to group by, along with\n            optional display names and help text.\n            '))
    - index_name: "month"
      display_name: "Month"
      help_text: "The month in which the patrol began or the event was updated."

# Parameters for 'Get Patrol Observations from EarthRanger' using task `get_patrol_observations`.
patrol_obs:
  client: "mep_dev" # (<class 'ecoscope_workflows.connections.EarthRangerClientProtocol'>, BeforeValidator(func=<bound method DataConnection.client_from_named_connection of <class 'ecoscope_workflows.connections.EarthRangerConnection'>>), WithJsonSchema(json_schema={'type': 'string', 'description': 'A named EarthRanger connection.'}, mode=None))
  since: "2015-01-01" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='Start date'))
  until: "2015-12-31" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='End date'))
  patrol_type: ["05ad114e-1aff-4602-bc83-efd333cdd8a2"] # (<class 'str'>, FieldInfo(annotation=NoneType, required=False, default=None, description='Comma-separated list of type of patrol UUID'))
  include_patrol_details: True # (<class 'bool'>, FieldInfo(annotation=NoneType, required=False, default=False, description='Include patrol details'))
  status: ["done"]

# Parameters for 'Transform Observations to Relocations' using task `process_relocations`.
patrol_reloc:
  filter_point_coords:
    - x: 180.0
      y: 90.0
    - x: 0.0
      y: 0.0
  relocs_columns: [
      "patrol_id",
      "patrol_start_time",
      "patrol_end_time",
      "patrol_type__display",
      "groupby_col",
      "fixtime",
      "junk_status",
      "extra__source",
      "geometry",
    ] # (list[str], FieldInfo(annotation=NoneType, required=True))

# Parameters for 'Transform Relocations to Trajectories' using task `relocations_to_trajectory`.
patrol_traj:
  min_length_meters: 0.001 # (<class 'float'>, FieldInfo(annotation=NoneType, required=True))
  max_length_meters: 10000 # (<class 'float'>, FieldInfo(annotation=NoneType, required=True))
  max_time_secs: 3600 # (<class 'float'>, FieldInfo(annotation=NoneType, required=True))
  min_time_secs: 1 # (<class 'float'>, FieldInfo(annotation=NoneType, required=True))
  max_speed_kmhr: 120 # (<class 'float'>, FieldInfo(annotation=NoneType, required=True))
  min_speed_kmhr: 0.0 # (<class 'float'>, FieldInfo(annotation=NoneType, required=True))

# Parameters for 'Add temporal index to Patrol Trajectories' using task `add_temporal_index`.
traj_add_temporal_index:
  index_name: "month" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='A name for the new index which will be added.'))
  time_col: "extra__patrol_start_time" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='Name of existing column containing time data.'))
  directive: "%B" # (typing.Literal['%a', '%A', '%b', '%B', '%c', '%d', '%f', '%H', '%I', '%j', '%m', '%M', '%p', '%S', '%U', '%w', '%W', '%x', '%X', '%y', '%Y', '%z', '%%'], FieldInfo(annotation=NoneType, required=True, description='A directive for formatting the time data.'))

# Parameters for 'Split Patrol Trajectories by Group' using task `split_groups`.
split_patrol_traj_groups: {}

# Parameters for 'Create map layer for each Patrol Trajectories group' using task `create_map_layer`.
patrol_traj_map_layers:
  layer_style:
    layer_type: "polyline"

# Parameters for 'Persist Ecomap as Text' using task `persist_text`.
patrol_traj_ecomap_html_url: {}

# Parameters for 'Create Map Widget for Patrols' using task `create_map_widget_single_view`.
patrol_traj_map_widget:
  title: "Patrol Trajectory Map" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='The title of the widget'))

# Parameters for 'Get Patrol Events from EarthRanger' using task `get_patrol_events`.
patrol_events:
  client: "mep_dev" # (<class 'ecoscope_workflows.connections.EarthRangerClientProtocol'>, BeforeValidator(func=<bound method DataConnection.client_from_named_connection of <class 'ecoscope_workflows.connections.EarthRangerConnection'>>), WithJsonSchema(json_schema={'type': 'string', 'description': 'A named EarthRanger connection.'}, mode=None))
  since: "2015-01-01" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='Start date'))
  until: "2015-12-31" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='End date'))
  patrol_type: ["05ad114e-1aff-4602-bc83-efd333cdd8a2"] # (<class 'str'>, FieldInfo(annotation=NoneType, required=False, default=None, description='Comma-separated list of type of patrol UUID'))
  status: ["active", "done"]

# Parameters for 'Apply Relocation Coordinate Filter' using task `apply_reloc_coord_filter`.
filter_patrol_events:
  max_y: 0.0 # (<class 'float'>, FieldInfo(annotation=NoneType, required=False, default=90.0))
  filter_point_coords:
    - x: 180.0
      y: 90.0
    - x: 0.0
      y: 0.0

# Parameters for 'Add temporal index to Patrol Events' using task `add_temporal_index`.
pe_add_temporal_index:
  index_name: "month" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='A name for the new index which will be added.'))
  time_col: "time" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='Name of existing column containing time data.'))
  directive: "%B" # (typing.Literal['%a', '%A', '%b', '%B', '%c', '%d', '%f', '%H', '%I', '%j', '%m', '%M', '%p', '%S', '%U', '%w', '%W', '%x', '%X', '%y', '%Y', '%z', '%%'], FieldInfo(annotation=NoneType, required=True, description='A directive for formatting the time data.'))

# Parameters for 'Split Patrol Events by Group' using task `split_groups`.
split_pe_groups: {}

# Parameters for 'Create map layers for each Patrols Events group' using task `create_map_layer`.
patrol_events_map_layers:
  layer_style:
    layer_type: "point"

# Parameters for 'Combine Trajectories and Patrol Events layers' using task `groupbykey`.
combined_traj_and_pe_map_layers: {}

# Parameters for 'Draw Ecomaps for each combined Trajectory and Patrol Events group' using task `draw_ecomap`.
traj_patrol_events_ecomap:
  tile_layer: "OpenStreetMap" # (str, FieldInfo(annotation=NoneType, required=False))
  static: False # (<class 'bool'>, FieldInfo(annotation=NoneType, required=False))
  title: "Trajectories & Patrol Events" # (<class 'str'>, FieldInfo(annotation=NoneType, required=False))

# Parameters for 'Persist Patrols Ecomap as Text' using task `persist_text`.
traj_pe_ecomap_html_urls: {}

# Parameters for 'Create Map Widget for Patrol Events' using task `create_map_widget_single_view`.
traj_pe_map_widgets_single_views:
  title: "Trajectories & Patrol Events Map" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='The title of the widget'))

# Parameters for 'Merge EcoMap Widget Views' using task `merge_widget_views`.
traj_pe_grouped_map_widget: {}

# Parameters for 'Calculate Total Patrols Per Group' using task `dataframe_column_nunique`.
total_patrols:
  column_name: "extra__patrol_id" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='Column to aggregate'))

# Parameters for 'Create Single Value Widgets for Total Patrols Per Group' using task `create_single_value_widget_single_view`.
total_patrols_sv_widgets:
  title: "Total Patrols" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='The title of the widget'))

# Parameters for 'Merge per group Total Patrols SV widgets into one Grouped Widget' using task `merge_widget_views`.
total_patrols_grouped_sv_widget: {}

# Parameters for 'Calculate Total Patrol Time Per Group' using task `dataframe_column_sum`.
total_patrol_time:
  column_name: "timespan_seconds" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='Column to aggregate'))

# Parameters for 'Convert total patrol time units' using task `apply_arithmetic_operation`.
total_patrol_time_converted:
  b: 3600 # (float | int, FieldInfo(annotation=NoneType, required=True, description='The second number'))
  operation: divide # (typing.Literal['add', 'subtract', 'multiply', 'divide', 'floor_divide', 'modulo', 'power'], FieldInfo(annotation=NoneType, required=True, description='The arithmetic operation to apply'))

# Parameters for 'Create Single Value Widgets for Total Patrol Time Per Group' using task `create_single_value_widget_single_view`.
total_patrol_time_sv_widgets:
  title: "Total Time" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='The title of the widget'))

# Parameters for 'Merge per group Total Patrol Per Group SV widgets' using task `merge_widget_views`.
patrol_time_grouped_widget: {}

# Parameters for 'Calculate Total Distance Per Group' using task `dataframe_column_sum`.
total_patrol_dist:
  column_name: "dist_meters" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='Column to aggregate'))

# Parameters for 'Convert total patrol distance units' using task `apply_arithmetic_operation`.
total_patrol_dist_converted:
  b: 1000 # (float | int, FieldInfo(annotation=NoneType, required=True, description='The second number'))
  operation: divide # (typing.Literal['add', 'subtract', 'multiply', 'divide', 'floor_divide', 'modulo', 'power'], FieldInfo(annotation=NoneType, required=True, description='The arithmetic operation to apply'))

# Parameters for 'Create Single Value Widgets for Total Distance Per Group' using task `create_single_value_widget_single_view`.
total_patrol_dist_sv_widgets:
  title: "Total Distance" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='The title of the widget'))

# Parameters for 'Merge per group Total Patrol Per Group SV widgets' using task `merge_widget_views`.
patrol_dist_grouped_widget: {}

# Parameters for 'Calculate Average Speed Per Group' using task `dataframe_column_mean`.
avg_speed:
  column_name: "speed_kmhr" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='Column to aggregate'))

# Parameters for 'Create Single Value Widgets for Avg Speed Per Group' using task `create_single_value_widget_single_view`.
avg_speed_sv_widgets:
  title: "Average Speed" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='The title of the widget'))

# Parameters for 'Merge per group Avg Speed SV widgets' using task `merge_widget_views`.
avg_speed_grouped_widget: {}

# Parameters for 'Calculate Max Speed Per Group' using task `dataframe_column_max`.
max_speed:
  column_name: "speed_kmhr" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='Column to aggregate'))

# Parameters for 'Create Single Value Widgets for Max Speed Per Group' using task `create_single_value_widget_single_view`.
max_speed_sv_widgets:
  title: "Max Speed" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='The title of the widget'))

# Parameters for 'Merge per group Max Speed SV widgets' using task `merge_widget_views`.
max_speed_grouped_widget: {}

# Parameters for 'Draw Time Series Bar Chart for Patrols Events' using task `draw_time_series_bar_chart`.
patrol_events_bar_chart:
  x_axis: "time" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='The dataframe column to plot in the x axis.'))
  y_axis: "event_type" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='The dataframe column to plot in the y axis.'))
  category: "event_type" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='The dataframe column to stack in the y axis.'))
  agg_function: "count" # (typing.Literal['count', 'mean', 'sum', 'min', 'max'], FieldInfo(annotation=NoneType, required=True, description='The aggregate function to apply to the group.'))
  time_interval: "month" # (typing.Literal['year', 'month', 'week', 'day', 'hour'], FieldInfo(annotation=NoneType, required=True, description='Sets the time interval of the x axis.'))
  grouped_styles:
    - category: "wildlife_sighting_rep"
      plot_style:
        marker_color: "#3e35a3"
    - category: "fence_rep"
      plot_style:
        marker_color: "#ff9600"
    - category: "radio_rep"
      plot_style:
        marker_color: "#b62879"
    - category: "rainfall_rep"
      plot_style:
        marker_color: "#f04564"
    - category: "traffic_rep"
      plot_style:
        marker_color: "#3089ff"
    - category: "fire_rep"
      plot_style:
        marker_color: "#8c1700"
  plot_style:
    xperiodalignment: "middle"

# Parameters for 'Persist Patrols Bar Chart as Text' using task `persist_text`.
patrol_events_bar_chart_html_url: {}

# Parameters for 'Create Plot Widget for Patrol Events' using task `create_plot_widget_single_view`.
patrol_events_bar_chart_widget:
  title: "Patrol Events Bar Chart" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='The title of the widget'))

# Parameters for 'Draw Pie Chart for Patrols Events' using task `draw_pie_chart`.
patrol_events_pie_chart:
  value_column: "event_type" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='The name of the dataframe column to pull slice values from.'))
  plot_style:
    textinfo: "value"

# Parameters for 'Persist Patrols Pie Chart as Text' using task `persist_text`.
pe_pie_chart_html_urls: {}

# Parameters for 'Create Plot Widget for Patrol Events' using task `create_plot_widget_single_view`.
patrol_events_pie_chart_widgets:
  title: "Patrol Events Pie Chart" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='The title of the widget'))

# Parameters for 'Merge Pie Chart Widget Views' using task `merge_widget_views`.
patrol_events_pie_widget_grouped: {}

# Parameters for 'Calculate Time Density from Trajectory' using task `calculate_time_density`.
td:
  pixel_size: 250.0 # (<class 'float'>, FieldInfo(annotation=NoneType, required=False, default=250.0, description='Pixel size for raster profile.'))
  crs: "ESRI:102022" # (<class 'str'>, FieldInfo(annotation=NoneType, required=False, default='ESRI:102022'))
  nodata_value: "nan" # (<class 'float'>, FieldInfo(annotation=NoneType, required=False, default=nan, metadata=[_PydanticGeneralMetadata(allow_inf_nan=True)]))
  band_count: 1 # (<class 'int'>, FieldInfo(annotation=NoneType, required=False, default=1))
  max_speed_factor: 1.05 # (<class 'float'>, FieldInfo(annotation=NoneType, required=False, default=1.05))
  expansion_factor: 1.3 # (<class 'float'>, FieldInfo(annotation=NoneType, required=False, default=1.3))
  percentiles: [50.0, 60.0, 70.0, 80.0, 90.0, 95.0] # (list[float], FieldInfo(annotation=NoneType, required=False, default=[50.0, 60.0, 70.0, 80.0, 90.0, 95.0]))

# Parameters for 'Create map layer from Time Density' using task `create_map_layer`.
td_map_layer:
  layer_style:
    layer_type: "polygon"

# Parameters for 'Draw Ecomap from Time Density' using task `draw_ecomap`.
td_ecomap:
  tile_layer: OpenStreetMap # (str, FieldInfo(annotation=NoneType, required=False))
  static: False # (<class 'bool'>, FieldInfo(annotation=NoneType, required=False))
  title: "Great Map" # (<class 'str'>, FieldInfo(annotation=NoneType, required=False))

# Parameters for 'Persist Ecomap as Text' using task `persist_text`.
td_ecomap_html_url: {}

# Parameters for 'Create Time Density Map Widget' using task `create_map_widget_single_view`.
td_map_widget:
  title: "Time Density Map" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='The title of the widget'))

# Parameters for 'Create Dashboard with Patrol Map Widget' using task `gather_dashboard`.
patrol_dashboard:
  title: "Patrols Dashboard"
  description: "A dashboard for visualizing patrol trajectories, patrols events, and time density."
