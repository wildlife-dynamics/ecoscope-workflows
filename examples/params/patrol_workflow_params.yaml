# Parameters for 'Get Patrol Observations from EarthRanger' using task `get_patrol_observations`.
patrol_obs:
  client: "mep_dev" # (<class 'ecoscope_workflows.connections.EarthRangerClientProtocol'>, BeforeValidator(func=<bound method DataConnection.client_from_named_connection of <class 'ecoscope_workflows.connections.EarthRangerConnection'>>), WithJsonSchema(json_schema={'type': 'string', 'description': 'A named EarthRanger connection.'}, mode=None))
  since: "2011-01-01" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='Start date'))
  until: "2023-01-01" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='End date'))
  patrol_type: ["0ef3bf48-b44c-4a4e-a145-7ab2e38c9a57"] # (<class 'str'>, FieldInfo(annotation=NoneType, required=False, default=None, description='Comma-separated list of type of patrol UUID'))
  include_patrol_details: True # (<class 'bool'>, FieldInfo(annotation=NoneType, required=False, default=False, description='Include patrol details'))
  status: ["done"]

# Parameters for 'Transform Observations to Relocations' using task `process_relocations`.
patrol_reloc:
  filter_point_coords: [[180, 90], [0, 0]] # (list[list[float]], FieldInfo(annotation=NoneType, required=True))
  relocs_columns: [
      "patrol_id",
      "patrol_start_time",
      "patrol_end_time",
      "patrol_type__display",
      "groupby_col",
      "fixtime",
      "junk_status",
      "extra__source",
      "geometry",
    ] # (list[str], FieldInfo(annotation=NoneType, required=True))

# Parameters for 'Transform Relocations to Trajectories' using task `relocations_to_trajectory`.
patrol_traj:
  min_length_meters: 0.001 # (<class 'float'>, FieldInfo(annotation=NoneType, required=True))
  max_length_meters: 10000 # (<class 'float'>, FieldInfo(annotation=NoneType, required=True))
  max_time_secs: 3600 # (<class 'float'>, FieldInfo(annotation=NoneType, required=True))
  min_time_secs: 1 # (<class 'float'>, FieldInfo(annotation=NoneType, required=True))
  max_speed_kmhr: 120 # (<class 'float'>, FieldInfo(annotation=NoneType, required=True))
  min_speed_kmhr: 0.0 # (<class 'float'>, FieldInfo(annotation=NoneType, required=True))

# Parameters for 'Draw Ecomap from Trajectories' using task `draw_ecomap`.
patrol_traj_ecomap:
  data_type: Path # (<class 'bool'>, FieldInfo(annotation=NoneType, required=True))
  style_kws: { get_width: 200 } # (<class 'dict'>, FieldInfo(annotation=NoneType, required=True))
  tile_layer: "OpenStreetMap" # (str, FieldInfo(annotation=NoneType, required=False))
  static: False # (<class 'bool'>, FieldInfo(annotation=NoneType, required=False))
  title: "Patrol Trajectory Map" # (<class 'str'>, FieldInfo(annotation=NoneType, required=False))
  title_kws: {} # (<class 'dict'>, FieldInfo(annotation=NoneType, required=False))
  scale_kws: {} # (<class 'dict'>, FieldInfo(annotation=NoneType, required=False))
  north_arrow_kws: {} # (<class 'dict'>, FieldInfo(annotation=NoneType, required=False))

# Parameters for 'Persist Ecomap as Text' using task `persist_text`.
patrol_traj_ecomap_html_url:
  root_path: "examples/output/" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='Root path to persist text to'))
  filename: "patrol_traj_map.html" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='Name of file to persist text to'))

# Parameters for 'Create Map Widget for Patrols' using task `create_map_widget_single_view`.
patrol_traj_map_widget:
  title: "Patrol Trajectory Map"  # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='The title of the widget'))

# Parameters for 'Get Patrol Events from EarthRanger' using task `get_patrol_events`.
patrol_events:
  client: "mep_dev" # (<class 'ecoscope_workflows.connections.EarthRangerClientProtocol'>, BeforeValidator(func=<bound method DataConnection.client_from_named_connection of <class 'ecoscope_workflows.connections.EarthRangerConnection'>>), WithJsonSchema(json_schema={'type': 'string', 'description': 'A named EarthRanger connection.'}, mode=None))
  since: "2011-01-01" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='Start date'))
  until: "2023-01-01" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='End date'))
  patrol_type: [
      "804c75f0-ed55-4bf5-b6fc-1aaf166bcf84",
      "fde19413-cb55-443e-9be6-d10e4a48c668",
      "0ef3bf48-b44c-4a4e-a145-7ab2e38c9a57",
    ] # (<class 'str'>, FieldInfo(annotation=NoneType, required=False, default=None, description='Comma-separated list of type of patrol UUID'))
  status: ["active", "done"]

# Parameters for 'Apply Relocation Coordinate Filter' using task `apply_reloc_coord_filter`.
filter_patrol_events:
  max_y: 0.0 # (<class 'float'>, FieldInfo(annotation=NoneType, required=False, default=90.0))
  filter_point_coords: [[180, 90], [0, 0]] # (list[list[float]], FieldInfo(annotation=NoneType, required=True))

# Parameters for 'Draw Ecomap for Patrols Events' using task `draw_ecomap`.
patrol_events_ecomap:
  data_type: Scatterplot # (<class 'bool'>, FieldInfo(annotation=NoneType, required=True))
  style_kws: {} # (<class 'dict'>, FieldInfo(annotation=NoneType, required=True))
  tile_layer: "OpenStreetMap" # (str, FieldInfo(annotation=NoneType, required=False))
  static: False # (<class 'bool'>, FieldInfo(annotation=NoneType, required=False))
  title: "Patrol Events Map" # (<class 'str'>, FieldInfo(annotation=NoneType, required=False))
  title_kws: {} # (<class 'dict'>, FieldInfo(annotation=NoneType, required=False))
  scale_kws: {} # (<class 'dict'>, FieldInfo(annotation=NoneType, required=False))
  north_arrow_kws: {} # (<class 'dict'>, FieldInfo(annotation=NoneType, required=False))

# Parameters for 'Persist Patrols Ecomap as Text' using task `persist_text`.
patrol_events_ecomap_html_url:
  root_path: "examples/output/" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='Root path to persist text to'))
  filename: "patrol_events_ecomap.html" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='Name of file to persist text to'))

# Parameters for 'Create Map Widget for Patrol Events' using task `create_map_widget_single_view`.
patrol_events_map_widget:
  title: "Patrol Events Map"  # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='The title of the widget'))

# Parameters for 'Create Dashboard with Patrol Map Widget' using task `gather_dashboard`.
patrol_dashboard:
  title: "Patrol Trajectory Dashboard"
  description: "A dashboard for visualizing patrol trajectories."
