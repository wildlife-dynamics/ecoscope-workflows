# Parameters for 'Get Observations' using task `get_subjectgroup_observations`.
obs:
  client: "mep_dev" # (<class 'ecoscope_workflows.connections.EarthRangerClientProtocol'>, BeforeValidator(func=<bound method DataConnection.client_from_named_connection of <class 'ecoscope_workflows.connections.EarthRangerConnection'>>), WithJsonSchema(json_schema={'type': 'string', 'description': 'A named EarthRanger connection.'}, mode=None))
  subject_group_name: "Elephants" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='Name of EarthRanger Subject'))
  include_inactive: True # (<class 'bool'>, FieldInfo(annotation=NoneType, required=True, description='Whether or not to include inactive subjects'))
  since: "2011-01-01" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='Start date'))
  until: "2023-01-01" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='End date'))

# Parameters for 'Set Groupers' using task `set_groupers`.
groupers:
  groupers:  ["event_type"]  # (list[str], FieldInfo(annotation=NoneType, required=True, description='Index(es) and/or column(s) to group by'))

# Parameters for 'Split Observations' using task `split_groups`.
split_obs: {}

# Parameters for 'Create EcoMap For Each Group' using task `draw_ecomap`.
ecomaps:
  data_type: Scatterplot # (typing.Literal['Scatterplot', 'Path', 'Polygon'], FieldInfo(annotation=NoneType, required=True, description='The type of visualization.'))
  style_kws: {}  # (<class 'dict'>, FieldInfo(annotation=NoneType, required=True, description='Style arguments for the data visualization.'))
  tile_layer: OpenStreetMap # (str, FieldInfo(annotation=NoneType, required=False))
  static: False # (<class 'bool'>, FieldInfo(annotation=NoneType, required=False))
  title: "Great Map" # (<class 'str'>, FieldInfo(annotation=NoneType, required=False))
  title_kws: {} # (<class 'dict'>, FieldInfo(annotation=NoneType, required=False))
  scale_kws: {} # (<class 'dict'>, FieldInfo(annotation=NoneType, required=False))
  north_arrow_kws: {} # (<class 'dict'>, FieldInfo(annotation=NoneType, required=False))

# Parameters for 'Persist EcoMaps' using task `persist_text`.
ecomaps_persist: {}

# Parameters for 'Create EcoMap Widgets' using task `create_map_widget_single_view`.
ecomap_widgets:
  title: "Grouped Ecomaps"  # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='The title of the widget'))

# Parameters for 'Create EcoMap Dashboard' using task `gather_dashboard`.
dashboard:
  title: "Grouped Dashboard of Observations"  # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='The title of the dashboard'))
  description: "A dashboard demonstrating grouped data." # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='The description of the dashboard'))
