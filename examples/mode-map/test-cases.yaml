# TODO: generate this _instead_ of "params_fillable.yaml"  and then edit it
test1:
  name: Test 1
  description: "Test case for mode-map"
  params:
    obs_a:  # Parameters for 'Get Observations A' using task `get_subjectgroup_observations`.
      client: "mep_dev" # (<class 'ecoscope_workflows.connections.EarthRangerClientProtocol'>, BeforeValidator(func=<bound method DataConnection.client_from_named_connection of <class 'ecoscope_workflows.connections.EarthRangerConnection'>>), WithJsonSchema(json_schema={'type': 'string', 'description': 'A named EarthRanger connection.'}, mode=None))
      subject_group_name: "Elephants" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='Name of EarthRanger Subject'))
      include_inactive: True # (<class 'bool'>, FieldInfo(annotation=NoneType, required=True, description='Whether or not to include inactive subjects'))
      since: "2011-01-01" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='Start date'))
      until: "2023-01-01" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='End date'))
    obs_b:  # Parameters for 'Get Observations B' using task `get_subjectgroup_observations`.
      client: "mep_dev" # (<class 'ecoscope_workflows.connections.EarthRangerClientProtocol'>, BeforeValidator(func=<bound method DataConnection.client_from_named_connection of <class 'ecoscope_workflows.connections.EarthRangerConnection'>>), WithJsonSchema(json_schema={'type': 'string', 'description': 'A named EarthRanger connection.'}, mode=None))
      subject_group_name: "Elephants" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='Name of EarthRanger Subject'))
      include_inactive: True # (<class 'bool'>, FieldInfo(annotation=NoneType, required=True, description='Whether or not to include inactive subjects'))
      since: "2011-01-01" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='Start date'))
      until: "2023-01-01" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='End date'))
    obs_c: # Parameters for 'Get Observations C' using task `get_subjectgroup_observations`.
      client: "mep_dev" # (<class 'ecoscope_workflows.connections.EarthRangerClientProtocol'>, BeforeValidator(func=<bound method DataConnection.client_from_named_connection of <class 'ecoscope_workflows.connections.EarthRangerConnection'>>), WithJsonSchema(json_schema={'type': 'string', 'description': 'A named EarthRanger connection.'}, mode=None))
      subject_group_name: "Elephants" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='Name of EarthRanger Subject'))
      include_inactive: True # (<class 'bool'>, FieldInfo(annotation=NoneType, required=True, description='Whether or not to include inactive subjects'))
      since: "2011-01-01" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='Start date'))
      until: "2023-01-01" # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='End date'))
    map_layers:  # Parameters for 'Create Map Layer For Each Group' using task `create_map_layer`.
      layer_style:
        layer_type: "point"
    ecomaps:  # Parameters for 'Create EcoMap For Each Group' using task `draw_ecomap`.
      tile_layer: OpenStreetMap # (str, FieldInfo(annotation=NoneType, required=False))
      static: False # (<class 'bool'>, FieldInfo(annotation=NoneType, required=False))
      title: "Great Map" # (<class 'str'>, FieldInfo(annotation=NoneType, required=False))
      north_arrow_style:
        placement: "top-right"
    td_ecomap_html_url: {}  # Parameters for 'Persist Ecomaps as Text' using task `persist_text`.
  assertions:
    result_stdout_contains:
      - ".html"
