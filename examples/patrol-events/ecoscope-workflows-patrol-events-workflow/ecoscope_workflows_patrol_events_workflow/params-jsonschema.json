{
  "title": "Params",
  "properties": {
    "groupers": {
      "additionalProperties": false,
      "properties": {
        "groupers": {
          "items": {
            "$ref": "#/$defs/Grouper"
          },
          "title": "Groupers",
          "type": "array",
          "description": "            Index(es) and/or column(s) to group by, along with\n            optional display names and help text.\n            "
        }
      },
      "required": [
        "groupers"
      ],
      "type": "object",
      "title": "Set Groupers"
    },
    "pe": {
      "additionalProperties": false,
      "properties": {
        "client": {
          "description": "A named EarthRanger connection.",
          "title": "Client",
          "type": "string"
        },
        "since": {
          "title": "Since",
          "type": "string",
          "description": "Start date"
        },
        "until": {
          "title": "Until",
          "type": "string",
          "description": "End date"
        },
        "patrol_type": {
          "items": {
            "type": "string"
          },
          "title": "Patrol Type",
          "type": "array",
          "description": "list of UUID of patrol types"
        },
        "status": {
          "items": {
            "type": "string"
          },
          "title": "Status",
          "type": "array",
          "description": "list of 'scheduled'/'active'/'overdue'/'done'/'cancelled'"
        }
      },
      "required": [
        "client",
        "since",
        "until",
        "patrol_type",
        "status"
      ],
      "type": "object",
      "title": "Get Patrol Events from EarthRanger"
    },
    "filter_patrol_events": {
      "additionalProperties": false,
      "properties": {
        "min_x": {
          "default": -180.0,
          "title": "Min X",
          "type": "number"
        },
        "max_x": {
          "default": 180.0,
          "title": "Max X",
          "type": "number"
        },
        "min_y": {
          "default": -90.0,
          "title": "Min Y",
          "type": "number"
        },
        "max_y": {
          "default": 90.0,
          "title": "Max Y",
          "type": "number"
        },
        "filter_point_coords": {
          "default": [
            {
              "x": 0.0,
              "y": 0.0
            }
          ],
          "items": {
            "$ref": "#/$defs/Coordinate"
          },
          "title": "Filter Point Coords",
          "type": "array"
        }
      },
      "required": [],
      "type": "object",
      "title": "Apply Relocation Coordinate Filter"
    },
    "pe_add_temporal_index": {
      "additionalProperties": false,
      "properties": {
        "index_name": {
          "title": "Index Name",
          "type": "string",
          "description": "A name for the new index which will be added."
        },
        "time_col": {
          "title": "Time Col",
          "type": "string",
          "description": "Name of existing column containing time data."
        },
        "directive": {
          "enum": [
            "%a",
            "%A",
            "%b",
            "%B",
            "%c",
            "%d",
            "%f",
            "%H",
            "%I",
            "%j",
            "%m",
            "%M",
            "%p",
            "%S",
            "%U",
            "%w",
            "%W",
            "%x",
            "%X",
            "%y",
            "%Y",
            "%z",
            "%%"
          ],
          "title": "Directive",
          "type": "string",
          "description": "A directive for formatting the time data."
        },
        "cast_to_datetime": {
          "default": true,
          "title": "Cast To Datetime",
          "type": "boolean",
          "description": "Whether to attempt casting `time_col` to datetime."
        },
        "format": {
          "default": "mixed",
          "title": "Format",
          "type": "string",
          "description": "            If `cast_to_datetime=True`, the format to pass to `pd.to_datetime`\n            when attempting to cast `time_col` to datetime. Defaults to \"mixed\".\n            "
        }
      },
      "required": [
        "index_name",
        "time_col",
        "directive"
      ],
      "type": "object",
      "title": "Add temporal index to Patrol Events"
    },
    "pe_colormap": {
      "additionalProperties": false,
      "properties": {
        "input_column_name": {
          "title": "Input Column Name",
          "type": "string",
          "description": "The name of the column with categorical values."
        },
        "colormap": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ],
          "default": "viridis",
          "title": "Colormap",
          "description": "Either a named mpl.colormap or a list of string hex values."
        },
        "output_column_name": {
          "default": null,
          "title": "Output Column Name",
          "type": "string",
          "description": "The dataframe column that will contain the color values."
        }
      },
      "required": [
        "input_column_name"
      ],
      "type": "object",
      "title": "Patrol Events Colormap"
    },
    "pe_map_layer": {
      "additionalProperties": false,
      "properties": {
        "layer_style": {
          "anyOf": [
            {
              "$ref": "#/$defs/PolylineLayerStyle"
            },
            {
              "$ref": "#/$defs/PolygonLayerStyle"
            },
            {
              "$ref": "#/$defs/PointLayerStyle"
            }
          ],
          "title": "Layer Style",
          "description": "Style arguments for the layer."
        },
        "legend": {
          "allOf": [
            {
              "$ref": "#/$defs/LegendDefinition"
            }
          ],
          "default": null,
          "title": "Legend",
          "description": "If present, includes this layer in the map legend"
        }
      },
      "required": [
        "layer_style"
      ],
      "type": "object",
      "title": "Create map layer from Patrol Events"
    },
    "pe_ecomap": {
      "additionalProperties": false,
      "properties": {
        "tile_layers": {
          "default": [],
          "items": {
            "$ref": "#/$defs/TileLayer"
          },
          "title": "Tile Layers",
          "type": "array",
          "description": "A list of named tile layer with opacity, ie OpenStreetMap."
        },
        "static": {
          "default": false,
          "title": "Static",
          "type": "boolean",
          "description": "Set to true to disable map pan/zoom."
        },
        "title": {
          "default": "",
          "title": "Title",
          "type": "string",
          "description": "The map title."
        },
        "north_arrow_style": {
          "allOf": [
            {
              "$ref": "#/$defs/NorthArrowStyle"
            }
          ],
          "default": {
            "placement": "top-left",
            "style": {
              "transform": "scale(0.8)"
            }
          },
          "title": "North Arrow Style",
          "description": "Additional arguments for configuring the North Arrow."
        },
        "legend_style": {
          "allOf": [
            {
              "$ref": "#/$defs/LegendStyle"
            }
          ],
          "default": {
            "placement": "bottom-right"
          },
          "title": "Legend Style",
          "description": "Additional arguments for configuring the legend."
        }
      },
      "required": [],
      "type": "object",
      "title": "Draw Ecomap from Time Density"
    },
    "pe_ecomap_html_url": {
      "additionalProperties": false,
      "properties": {
        "filename": {
          "default": null,
          "title": "Filename",
          "type": "string",
          "description": "            Optional filename to persist text to within the `root_path`.\n            If not provided, a filename will be generated based on a hash of the text content.\n            "
        }
      },
      "required": [],
      "type": "object",
      "title": "Persist Ecomap as Text"
    },
    "pe_map_widget": {
      "additionalProperties": false,
      "properties": {
        "title": {
          "title": "Title",
          "type": "string",
          "description": "The title of the widget"
        }
      },
      "required": [
        "title"
      ],
      "type": "object",
      "title": "Create Time Density Map Widget"
    },
    "pe_bar_chart": {
      "additionalProperties": false,
      "properties": {
        "x_axis": {
          "title": "X Axis",
          "type": "string",
          "description": "The dataframe column to plot in the x/time axis."
        },
        "y_axis": {
          "title": "Y Axis",
          "type": "string",
          "description": "The dataframe column to plot in the y axis."
        },
        "category": {
          "title": "Category",
          "type": "string",
          "description": "The dataframe column to stack in the y axis."
        },
        "agg_function": {
          "enum": [
            "count",
            "mean",
            "sum",
            "min",
            "max"
          ],
          "title": "Agg Function",
          "type": "string",
          "description": "The aggregate function to apply to the group."
        },
        "time_interval": {
          "enum": [
            "year",
            "month",
            "week",
            "day",
            "hour"
          ],
          "title": "Time Interval",
          "type": "string",
          "description": "Sets the time interval of the x axis."
        },
        "color_column": {
          "default": null,
          "title": "Color Column",
          "type": "string",
          "description": "The name of the dataframe column to color bars with."
        },
        "grouped_styles": {
          "default": [],
          "items": {
            "$ref": "#/$defs/GroupedPlotStyle"
          },
          "title": "Grouped Styles",
          "type": "array",
          "description": "Style arguments passed to plotly.graph_objects.Bar and applied to individual groups."
        },
        "plot_style": {
          "allOf": [
            {
              "$ref": "#/$defs/PlotStyle"
            }
          ],
          "default": null,
          "title": "Plot Style",
          "description": "Additional style kwargs passed to go.Bar()."
        },
        "layout_style": {
          "allOf": [
            {
              "$ref": "#/$defs/BarLayoutStyle"
            }
          ],
          "default": null,
          "title": "Layout Style",
          "description": "Additional kwargs passed to plotly.go.Figure(layout)."
        }
      },
      "required": [
        "x_axis",
        "y_axis",
        "category",
        "agg_function",
        "time_interval"
      ],
      "type": "object",
      "title": "Draw Time Series Bar Chart for Patrols Events"
    },
    "pe_bar_chart_html_url": {
      "additionalProperties": false,
      "properties": {
        "filename": {
          "default": null,
          "title": "Filename",
          "type": "string",
          "description": "            Optional filename to persist text to within the `root_path`.\n            If not provided, a filename will be generated based on a hash of the text content.\n            "
        }
      },
      "required": [],
      "type": "object",
      "title": "Persist Patrols Bar Chart as Text"
    },
    "pe_bar_chart_widget": {
      "additionalProperties": false,
      "properties": {
        "title": {
          "title": "Title",
          "type": "string",
          "description": "The title of the widget"
        }
      },
      "required": [
        "title"
      ],
      "type": "object",
      "title": "Create Plot Widget for Patrol Events"
    },
    "pe_meshgrid": {
      "additionalProperties": false,
      "properties": {
        "cell_width": {
          "default": 5000,
          "title": "Cell Width",
          "type": "integer",
          "description": "The width of a grid cell in meters."
        },
        "cell_height": {
          "default": 5000,
          "title": "Cell Height",
          "type": "integer",
          "description": "The height of a grid cell in meters."
        },
        "intersecting_only": {
          "default": false,
          "title": "Intersecting Only",
          "type": "boolean",
          "description": "Whether to return only grid cells intersecting with the aoi."
        }
      },
      "required": [],
      "type": "object",
      "title": "Create Patrol Events Meshgrid"
    },
    "pe_feature_density": {
      "additionalProperties": false,
      "properties": {
        "geometry_type": {
          "enum": [
            "point",
            "line"
          ],
          "title": "Geometry Type",
          "type": "string",
          "description": "The geometry type of the provided geodataframe"
        }
      },
      "required": [
        "geometry_type"
      ],
      "type": "object",
      "title": "Patrol Events Feature Density"
    },
    "fd_colormap": {
      "additionalProperties": false,
      "properties": {
        "input_column_name": {
          "title": "Input Column Name",
          "type": "string",
          "description": "The name of the column with categorical values."
        },
        "colormap": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ],
          "default": "viridis",
          "title": "Colormap",
          "description": "Either a named mpl.colormap or a list of string hex values."
        },
        "output_column_name": {
          "default": null,
          "title": "Output Column Name",
          "type": "string",
          "description": "The dataframe column that will contain the color values."
        }
      },
      "required": [
        "input_column_name"
      ],
      "type": "object",
      "title": "Feature Density Colormap"
    },
    "fd_map_layer": {
      "additionalProperties": false,
      "properties": {
        "layer_style": {
          "anyOf": [
            {
              "$ref": "#/$defs/PolylineLayerStyle"
            },
            {
              "$ref": "#/$defs/PolygonLayerStyle"
            },
            {
              "$ref": "#/$defs/PointLayerStyle"
            }
          ],
          "title": "Layer Style",
          "description": "Style arguments for the layer."
        },
        "legend": {
          "allOf": [
            {
              "$ref": "#/$defs/LegendDefinition"
            }
          ],
          "default": null,
          "title": "Legend",
          "description": "If present, includes this layer in the map legend"
        }
      },
      "required": [
        "layer_style"
      ],
      "type": "object",
      "title": "Create map layer from Feature Density"
    },
    "fd_ecomap": {
      "additionalProperties": false,
      "properties": {
        "tile_layers": {
          "default": [],
          "items": {
            "$ref": "#/$defs/TileLayer"
          },
          "title": "Tile Layers",
          "type": "array",
          "description": "A list of named tile layer with opacity, ie OpenStreetMap."
        },
        "static": {
          "default": false,
          "title": "Static",
          "type": "boolean",
          "description": "Set to true to disable map pan/zoom."
        },
        "title": {
          "default": "",
          "title": "Title",
          "type": "string",
          "description": "The map title."
        },
        "north_arrow_style": {
          "allOf": [
            {
              "$ref": "#/$defs/NorthArrowStyle"
            }
          ],
          "default": {
            "placement": "top-left",
            "style": {
              "transform": "scale(0.8)"
            }
          },
          "title": "North Arrow Style",
          "description": "Additional arguments for configuring the North Arrow."
        },
        "legend_style": {
          "allOf": [
            {
              "$ref": "#/$defs/LegendStyle"
            }
          ],
          "default": {
            "placement": "bottom-right"
          },
          "title": "Legend Style",
          "description": "Additional arguments for configuring the legend."
        }
      },
      "required": [],
      "type": "object",
      "title": "Draw Ecomap from Feature Density"
    },
    "fd_ecomap_html_url": {
      "additionalProperties": false,
      "properties": {
        "filename": {
          "default": null,
          "title": "Filename",
          "type": "string",
          "description": "            Optional filename to persist text to within the `root_path`.\n            If not provided, a filename will be generated based on a hash of the text content.\n            "
        }
      },
      "required": [],
      "type": "object",
      "title": "Persist Feature Density Ecomap as Text"
    },
    "fd_map_widget": {
      "additionalProperties": false,
      "properties": {
        "title": {
          "title": "Title",
          "type": "string",
          "description": "The title of the widget"
        }
      },
      "required": [
        "title"
      ],
      "type": "object",
      "title": "Create Feature Density Map Widget"
    },
    "split_patrol_event_groups": {
      "additionalProperties": false,
      "properties": {},
      "required": [],
      "type": "object",
      "title": "Split Patrol Events by Group"
    },
    "grouped_pe_map_layer": {
      "additionalProperties": false,
      "properties": {
        "layer_style": {
          "anyOf": [
            {
              "$ref": "#/$defs/PolylineLayerStyle"
            },
            {
              "$ref": "#/$defs/PolygonLayerStyle"
            },
            {
              "$ref": "#/$defs/PointLayerStyle"
            }
          ],
          "title": "Layer Style",
          "description": "Style arguments for the layer."
        },
        "legend": {
          "allOf": [
            {
              "$ref": "#/$defs/LegendDefinition"
            }
          ],
          "default": null,
          "title": "Legend",
          "description": "If present, includes this layer in the map legend"
        }
      },
      "required": [
        "layer_style"
      ],
      "type": "object",
      "title": "Create map layer from grouped Patrol Events"
    },
    "grouped_pe_ecomap": {
      "additionalProperties": false,
      "properties": {
        "tile_layers": {
          "default": [],
          "items": {
            "$ref": "#/$defs/TileLayer"
          },
          "title": "Tile Layers",
          "type": "array",
          "description": "A list of named tile layer with opacity, ie OpenStreetMap."
        },
        "static": {
          "default": false,
          "title": "Static",
          "type": "boolean",
          "description": "Set to true to disable map pan/zoom."
        },
        "title": {
          "default": "",
          "title": "Title",
          "type": "string",
          "description": "The map title."
        },
        "north_arrow_style": {
          "allOf": [
            {
              "$ref": "#/$defs/NorthArrowStyle"
            }
          ],
          "default": {
            "placement": "top-left",
            "style": {
              "transform": "scale(0.8)"
            }
          },
          "title": "North Arrow Style",
          "description": "Additional arguments for configuring the North Arrow."
        },
        "legend_style": {
          "allOf": [
            {
              "$ref": "#/$defs/LegendStyle"
            }
          ],
          "default": {
            "placement": "bottom-right"
          },
          "title": "Legend Style",
          "description": "Additional arguments for configuring the legend."
        }
      },
      "required": [],
      "type": "object",
      "title": "Draw Ecomap from grouped Patrol Events"
    },
    "grouped_pe_ecomap_html_url": {
      "additionalProperties": false,
      "properties": {
        "filename": {
          "default": null,
          "title": "Filename",
          "type": "string",
          "description": "            Optional filename to persist text to within the `root_path`.\n            If not provided, a filename will be generated based on a hash of the text content.\n            "
        }
      },
      "required": [],
      "type": "object",
      "title": "Persist grouped Patrol Events Ecomap as Text"
    },
    "grouped_pe_map_widget": {
      "additionalProperties": false,
      "properties": {
        "title": {
          "title": "Title",
          "type": "string",
          "description": "The title of the widget"
        }
      },
      "required": [
        "title"
      ],
      "type": "object",
      "title": "Create grouped Patrol Events Map Widget"
    },
    "grouped_pe_map_widget_merge": {
      "additionalProperties": false,
      "properties": {},
      "required": [],
      "type": "object",
      "title": "Merge Patrol Events Map Widget Views"
    },
    "grouped_pe_pie_chart": {
      "additionalProperties": false,
      "properties": {
        "value_column": {
          "title": "Value Column",
          "type": "string",
          "description": "The name of the dataframe column to pull slice values from."
        },
        "label_column": {
          "default": null,
          "title": "Label Column",
          "type": "string",
          "description": "The name of the dataframe column to label slices with, required if the data in value_column is numeric."
        },
        "color_column": {
          "default": null,
          "title": "Color Column",
          "type": "string",
          "description": "The name of the dataframe column to color slices with."
        },
        "plot_style": {
          "allOf": [
            {
              "$ref": "#/$defs/PlotStyle"
            }
          ],
          "default": null,
          "title": "Plot Style",
          "description": "Additional style kwargs passed to go.Pie()."
        },
        "layout_style": {
          "allOf": [
            {
              "$ref": "#/$defs/LayoutStyle"
            }
          ],
          "default": null,
          "title": "Layout Style",
          "description": "Additional kwargs passed to plotly.go.Figure(layout)."
        }
      },
      "required": [
        "value_column"
      ],
      "type": "object",
      "title": "Draw Pie Chart for Patrols Events"
    },
    "grouped_pe_pie_chart_html_urls": {
      "additionalProperties": false,
      "properties": {
        "filename": {
          "default": null,
          "title": "Filename",
          "type": "string",
          "description": "            Optional filename to persist text to within the `root_path`.\n            If not provided, a filename will be generated based on a hash of the text content.\n            "
        }
      },
      "required": [],
      "type": "object",
      "title": "Persist Patrols Pie Chart as Text"
    },
    "grouped_pe_pie_chart_widgets": {
      "additionalProperties": false,
      "properties": {
        "title": {
          "title": "Title",
          "type": "string",
          "description": "The title of the widget"
        }
      },
      "required": [
        "title"
      ],
      "type": "object",
      "title": "Create Plot Widget for Patrol Events"
    },
    "grouped_pe_pie_widget_merge": {
      "additionalProperties": false,
      "properties": {},
      "required": [],
      "type": "object",
      "title": "Merge Pie Chart Widget Views"
    },
    "grouped_pe_feature_density": {
      "additionalProperties": false,
      "properties": {
        "geometry_type": {
          "enum": [
            "point",
            "line"
          ],
          "title": "Geometry Type",
          "type": "string",
          "description": "The geometry type of the provided geodataframe"
        }
      },
      "required": [
        "geometry_type"
      ],
      "type": "object",
      "title": "Grouped Patrol Events Feature Density"
    },
    "grouped_fd_colormap": {
      "additionalProperties": false,
      "properties": {
        "input_column_name": {
          "title": "Input Column Name",
          "type": "string",
          "description": "The name of the column with categorical values."
        },
        "colormap": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ],
          "default": "viridis",
          "title": "Colormap",
          "description": "Either a named mpl.colormap or a list of string hex values."
        },
        "output_column_name": {
          "default": null,
          "title": "Output Column Name",
          "type": "string",
          "description": "The dataframe column that will contain the color values."
        }
      },
      "required": [
        "input_column_name"
      ],
      "type": "object",
      "title": "Grouped Feature Density Colormap"
    },
    "grouped_fd_map_layer": {
      "additionalProperties": false,
      "properties": {
        "layer_style": {
          "anyOf": [
            {
              "$ref": "#/$defs/PolylineLayerStyle"
            },
            {
              "$ref": "#/$defs/PolygonLayerStyle"
            },
            {
              "$ref": "#/$defs/PointLayerStyle"
            }
          ],
          "title": "Layer Style",
          "description": "Style arguments for the layer."
        },
        "legend": {
          "allOf": [
            {
              "$ref": "#/$defs/LegendDefinition"
            }
          ],
          "default": null,
          "title": "Legend",
          "description": "If present, includes this layer in the map legend"
        }
      },
      "required": [
        "layer_style"
      ],
      "type": "object",
      "title": "Create map layer from Feature Density"
    },
    "grouped_fd_ecomap": {
      "additionalProperties": false,
      "properties": {
        "tile_layers": {
          "default": [],
          "items": {
            "$ref": "#/$defs/TileLayer"
          },
          "title": "Tile Layers",
          "type": "array",
          "description": "A list of named tile layer with opacity, ie OpenStreetMap."
        },
        "static": {
          "default": false,
          "title": "Static",
          "type": "boolean",
          "description": "Set to true to disable map pan/zoom."
        },
        "title": {
          "default": "",
          "title": "Title",
          "type": "string",
          "description": "The map title."
        },
        "north_arrow_style": {
          "allOf": [
            {
              "$ref": "#/$defs/NorthArrowStyle"
            }
          ],
          "default": {
            "placement": "top-left",
            "style": {
              "transform": "scale(0.8)"
            }
          },
          "title": "North Arrow Style",
          "description": "Additional arguments for configuring the North Arrow."
        },
        "legend_style": {
          "allOf": [
            {
              "$ref": "#/$defs/LegendStyle"
            }
          ],
          "default": {
            "placement": "bottom-right"
          },
          "title": "Legend Style",
          "description": "Additional arguments for configuring the legend."
        }
      },
      "required": [],
      "type": "object",
      "title": "Draw Ecomap from Feature Density"
    },
    "grouped_fd_ecomap_html_url": {
      "additionalProperties": false,
      "properties": {
        "filename": {
          "default": null,
          "title": "Filename",
          "type": "string",
          "description": "            Optional filename to persist text to within the `root_path`.\n            If not provided, a filename will be generated based on a hash of the text content.\n            "
        }
      },
      "required": [],
      "type": "object",
      "title": "Persist Feature Density Ecomap as Text"
    },
    "grouped_fd_map_widget": {
      "additionalProperties": false,
      "properties": {
        "title": {
          "title": "Title",
          "type": "string",
          "description": "The title of the widget"
        }
      },
      "required": [
        "title"
      ],
      "type": "object",
      "title": "Create Feature Density Map Widget"
    },
    "grouped_fd_map_widget_merge": {
      "additionalProperties": false,
      "properties": {},
      "required": [],
      "type": "object",
      "title": "Merge Feature Density Widget Views"
    },
    "patrol_dashboard": {
      "additionalProperties": false,
      "properties": {
        "title": {
          "title": "Title",
          "type": "string",
          "description": "The title of the dashboard"
        },
        "description": {
          "title": "Description",
          "type": "string",
          "description": "The description of the dashboard"
        }
      },
      "required": [
        "title",
        "description"
      ],
      "type": "object",
      "title": "Create Dashboard with Patrol Map Widgets"
    }
  },
  "$defs": {
    "Grouper": {
      "properties": {
        "index_name": {
          "title": "Index Name",
          "type": "string"
        },
        "display_name": {
          "default": null,
          "title": "Display Name",
          "type": "string"
        },
        "help_text": {
          "default": null,
          "title": "Help Text",
          "type": "string"
        }
      },
      "required": [
        "index_name"
      ],
      "title": "Grouper",
      "type": "object"
    },
    "Coordinate": {
      "properties": {
        "x": {
          "title": "X",
          "type": "number"
        },
        "y": {
          "title": "Y",
          "type": "number"
        }
      },
      "required": [
        "x",
        "y"
      ],
      "title": "Coordinate",
      "type": "object"
    },
    "LegendDefinition": {
      "properties": {
        "label_column": {
          "title": "Label Column",
          "type": "string"
        },
        "color_column": {
          "title": "Color Column",
          "type": "string"
        }
      },
      "required": [
        "label_column",
        "color_column"
      ],
      "title": "LegendDefinition",
      "type": "object"
    },
    "PointLayerStyle": {
      "properties": {
        "auto_highlight": {
          "default": false,
          "title": "Auto Highlight",
          "type": "boolean"
        },
        "opacity": {
          "default": 1,
          "title": "Opacity",
          "type": "number"
        },
        "pickable": {
          "default": true,
          "title": "Pickable",
          "type": "boolean"
        },
        "filled": {
          "default": true,
          "title": "Filled",
          "type": "boolean"
        },
        "get_fill_color": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "integer"
              },
              "type": "array"
            },
            {
              "items": {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Get Fill Color"
        },
        "get_line_color": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "integer"
              },
              "type": "array"
            },
            {
              "items": {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Get Line Color"
        },
        "get_line_width": {
          "default": 1,
          "title": "Get Line Width",
          "type": "number"
        },
        "fill_color_column": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Fill Color Column"
        },
        "line_width_units": {
          "default": "pixels",
          "enum": [
            "meters",
            "pixels"
          ],
          "title": "Line Width Units",
          "type": "string"
        },
        "layer_type": {
          "const": "point",
          "default": "point",
          "enum": [
            "point"
          ],
          "title": "Layer Type",
          "type": "string"
        },
        "get_radius": {
          "default": 5,
          "title": "Get Radius",
          "type": "number"
        },
        "radius_units": {
          "default": "pixels",
          "enum": [
            "meters",
            "pixels"
          ],
          "title": "Radius Units",
          "type": "string"
        }
      },
      "title": "PointLayerStyle",
      "type": "object"
    },
    "PolygonLayerStyle": {
      "properties": {
        "auto_highlight": {
          "default": false,
          "title": "Auto Highlight",
          "type": "boolean"
        },
        "opacity": {
          "default": 1,
          "title": "Opacity",
          "type": "number"
        },
        "pickable": {
          "default": true,
          "title": "Pickable",
          "type": "boolean"
        },
        "filled": {
          "default": true,
          "title": "Filled",
          "type": "boolean"
        },
        "get_fill_color": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "integer"
              },
              "type": "array"
            },
            {
              "items": {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Get Fill Color"
        },
        "get_line_color": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "integer"
              },
              "type": "array"
            },
            {
              "items": {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Get Line Color"
        },
        "get_line_width": {
          "default": 1,
          "title": "Get Line Width",
          "type": "number"
        },
        "fill_color_column": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Fill Color Column"
        },
        "line_width_units": {
          "default": "pixels",
          "enum": [
            "meters",
            "pixels"
          ],
          "title": "Line Width Units",
          "type": "string"
        },
        "layer_type": {
          "const": "polygon",
          "default": "polygon",
          "enum": [
            "polygon"
          ],
          "title": "Layer Type",
          "type": "string"
        },
        "extruded": {
          "default": false,
          "title": "Extruded",
          "type": "boolean"
        },
        "get_elevation": {
          "default": 1000,
          "title": "Get Elevation",
          "type": "number"
        }
      },
      "title": "PolygonLayerStyle",
      "type": "object"
    },
    "PolylineLayerStyle": {
      "properties": {
        "auto_highlight": {
          "default": false,
          "title": "Auto Highlight",
          "type": "boolean"
        },
        "opacity": {
          "default": 1,
          "title": "Opacity",
          "type": "number"
        },
        "pickable": {
          "default": true,
          "title": "Pickable",
          "type": "boolean"
        },
        "layer_type": {
          "const": "polyline",
          "default": "polyline",
          "enum": [
            "polyline"
          ],
          "title": "Layer Type",
          "type": "string"
        },
        "get_color": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "integer"
              },
              "type": "array"
            },
            {
              "items": {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Get Color"
        },
        "get_width": {
          "default": 3,
          "title": "Get Width",
          "type": "number"
        },
        "color_column": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Color Column"
        },
        "width_units": {
          "default": "pixels",
          "enum": [
            "meters",
            "pixels"
          ],
          "title": "Width Units",
          "type": "string"
        },
        "cap_rounded": {
          "default": true,
          "title": "Cap Rounded",
          "type": "boolean"
        }
      },
      "title": "PolylineLayerStyle",
      "type": "object"
    },
    "LayerDefinition": {
      "properties": {
        "geodataframe": {
          "title": "Geodataframe",
          "type": "ecoscope_workflows.annotations.DataFrame"
        },
        "layer_style": {
          "discriminator": {
            "mapping": {
              "point": "#/$defs/PointLayerStyle",
              "polygon": "#/$defs/PolygonLayerStyle",
              "polyline": "#/$defs/PolylineLayerStyle"
            },
            "propertyName": "layer_type"
          },
          "oneOf": [
            {
              "$ref": "#/$defs/PolylineLayerStyle"
            },
            {
              "$ref": "#/$defs/PointLayerStyle"
            },
            {
              "$ref": "#/$defs/PolygonLayerStyle"
            }
          ],
          "title": "Layer Style"
        },
        "legend": {
          "$ref": "#/$defs/LegendDefinition"
        }
      },
      "required": [
        "geodataframe",
        "layer_style",
        "legend"
      ],
      "title": "LayerDefinition",
      "type": "object"
    },
    "LegendStyle": {
      "properties": {
        "placement": {
          "default": "bottom-right",
          "enum": [
            "top-left",
            "top-right",
            "bottom-left",
            "bottom-right",
            "fill"
          ],
          "title": "Placement",
          "type": "string"
        }
      },
      "title": "LegendStyle",
      "type": "object"
    },
    "NorthArrowStyle": {
      "properties": {
        "placement": {
          "default": "top-left",
          "enum": [
            "top-left",
            "top-right",
            "bottom-left",
            "bottom-right",
            "fill"
          ],
          "title": "Placement",
          "type": "string"
        },
        "style": {
          "default": {
            "transform": "scale(0.8)"
          },
          "title": "Style",
          "type": "object"
        }
      },
      "title": "NorthArrowStyle",
      "type": "object"
    },
    "TileLayer": {
      "properties": {
        "name": {
          "title": "Name",
          "type": "string"
        },
        "opacity": {
          "default": 1,
          "title": "Opacity",
          "type": "number"
        }
      },
      "required": [
        "name"
      ],
      "title": "TileLayer",
      "type": "object"
    },
    "BarLayoutStyle": {
      "properties": {
        "font_color": {
          "default": null,
          "title": "Font Color",
          "type": "string"
        },
        "font_style": {
          "default": null,
          "title": "Font Style",
          "type": "string"
        },
        "plot_bgcolor": {
          "default": null,
          "title": "Plot Bgcolor",
          "type": "string"
        },
        "showlegend": {
          "default": null,
          "title": "Showlegend",
          "type": "boolean"
        },
        "bargap": {
          "default": null,
          "maximum": 1.0,
          "minimum": 0.0,
          "title": "Bargap",
          "type": "number"
        },
        "bargroupgap": {
          "default": null,
          "maximum": 1.0,
          "minimum": 0.0,
          "title": "Bargroupgap",
          "type": "number"
        }
      },
      "title": "BarLayoutStyle",
      "type": "object"
    },
    "GroupedPlotStyle": {
      "properties": {
        "category": {
          "title": "Category",
          "type": "string"
        },
        "plot_style": {
          "$ref": "#/$defs/PlotCategoryStyle"
        }
      },
      "required": [
        "category",
        "plot_style"
      ],
      "title": "GroupedPlotStyle",
      "type": "object"
    },
    "LineStyle": {
      "properties": {
        "color": {
          "default": null,
          "title": "Color",
          "type": "string"
        }
      },
      "title": "LineStyle",
      "type": "object"
    },
    "PlotCategoryStyle": {
      "properties": {
        "marker_color": {
          "default": null,
          "title": "Marker Color",
          "type": "string"
        }
      },
      "title": "PlotCategoryStyle",
      "type": "object"
    },
    "PlotStyle": {
      "properties": {
        "xperiodalignment": {
          "default": null,
          "title": "Xperiodalignment",
          "type": "string"
        },
        "marker_colors": {
          "default": null,
          "items": {
            "type": "string"
          },
          "title": "Marker Colors",
          "type": "array"
        },
        "textinfo": {
          "default": null,
          "title": "Textinfo",
          "type": "string"
        },
        "line": {
          "allOf": [
            {
              "$ref": "#/$defs/LineStyle"
            }
          ],
          "default": null,
          "title": "Line"
        }
      },
      "title": "PlotStyle",
      "type": "object"
    },
    "WidgetSingleView": {
      "properties": {
        "widget_type": {
          "enum": [
            "graph",
            "map",
            "text",
            "stat"
          ],
          "title": "Widget Type",
          "type": "string"
        },
        "title": {
          "title": "Title",
          "type": "string"
        },
        "data": {
          "anyOf": [
            {
              "format": "path",
              "type": "string"
            },
            {
              "format": "uri",
              "minLength": 1,
              "type": "string"
            },
            {
              "type": "string"
            }
          ],
          "title": "Data"
        },
        "view": {
          "anyOf": [
            {
              "items": {
                "maxItems": 3,
                "minItems": 3,
                "prefixItems": [
                  {
                    "type": "string"
                  },
                  {
                    "const": "=",
                    "enum": [
                      "="
                    ],
                    "type": "string"
                  },
                  {
                    "type": "string"
                  }
                ],
                "type": "array"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "View"
        }
      },
      "required": [
        "widget_type",
        "title",
        "data"
      ],
      "title": "WidgetSingleView",
      "type": "object"
    },
    "LayoutStyle": {
      "properties": {
        "font_color": {
          "default": null,
          "title": "Font Color",
          "type": "string"
        },
        "font_style": {
          "default": null,
          "title": "Font Style",
          "type": "string"
        },
        "plot_bgcolor": {
          "default": null,
          "title": "Plot Bgcolor",
          "type": "string"
        },
        "showlegend": {
          "default": null,
          "title": "Showlegend",
          "type": "boolean"
        }
      },
      "title": "LayoutStyle",
      "type": "object"
    },
    "GroupedWidget": {
      "properties": {
        "widget_type": {
          "enum": [
            "graph",
            "map",
            "text",
            "stat"
          ],
          "title": "Widget Type",
          "type": "string"
        },
        "title": {
          "title": "Title",
          "type": "string"
        },
        "views": {
          "additionalProperties": {
            "anyOf": [
              {
                "format": "path",
                "type": "string"
              },
              {
                "format": "uri",
                "minLength": 1,
                "type": "string"
              },
              {
                "type": "string"
              }
            ]
          },
          "title": "Views",
          "type": "object"
        }
      },
      "required": [
        "widget_type",
        "title",
        "views"
      ],
      "title": "GroupedWidget",
      "type": "object"
    }
  },
  "additionalProperties": false,
  "uiSchema": {
    "ui:order": [
      "groupers",
      "pe",
      "filter_patrol_events",
      "pe_add_temporal_index",
      "pe_colormap",
      "pe_map_layer",
      "pe_ecomap",
      "pe_ecomap_html_url",
      "pe_map_widget",
      "pe_bar_chart",
      "pe_bar_chart_html_url",
      "pe_bar_chart_widget",
      "pe_meshgrid",
      "pe_feature_density",
      "fd_colormap",
      "fd_map_layer",
      "fd_ecomap",
      "fd_ecomap_html_url",
      "fd_map_widget",
      "split_patrol_event_groups",
      "grouped_pe_map_layer",
      "grouped_pe_ecomap",
      "grouped_pe_ecomap_html_url",
      "grouped_pe_map_widget",
      "grouped_pe_map_widget_merge",
      "grouped_pe_pie_chart",
      "grouped_pe_pie_chart_html_urls",
      "grouped_pe_pie_chart_widgets",
      "grouped_pe_pie_widget_merge",
      "grouped_pe_feature_density",
      "grouped_fd_colormap",
      "grouped_fd_map_layer",
      "grouped_fd_ecomap",
      "grouped_fd_ecomap_html_url",
      "grouped_fd_map_widget",
      "grouped_fd_map_widget_merge",
      "patrol_dashboard"
    ]
  }
}
